{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CellEngine API Toolkit for Python This is the documentation for the Python toolkit for the CellEngine API. For API documentation visit here . Quick Start Install cellengine using pip from GitHub: pip install git+https://github.com/primitybio/cellengine-python-toolkit.git Authentication import cellengine client = cellengine . APIClient ( username = \"jason\" ) # Password: <enter your password here> # Alternatively, authenticate by setting CELLENGINE_PASSWORD or # CELLENGINE_AUTH_TOKEN in your environment # Get a list of all accessible experiments experiments = client . get_experiments () Get resources All resources have a unique ID stored as _id , e.g. Experiment()._id . Resources can be retrieved by name or by ID: # Get an experiment by its name experiment = client . get_experiment ( name = \"My experiment\" ) experiment = cellengine . Experiment . get ( name = \"My experiment\" ) # or by its ID experiment = client . get_experiment ( \"5f203e852a183003c2459c94\" ) # Get an attachment by name att = experiment . get_attachment ( name = \"my attachment\" ) att = Attachment . get ( experiment . _id , \"my attachment\" ) # or by its ID att = experiment . get_attachment ( \"5f3ac0ba5465db092213cff5\" ) att = client . get_attachment ( experiment . _id , \"5f3ac0ba5465db092213cff5\" ) Create resources experiment . upload_attachment ( \"path/to/my_file.txt\" ) experiment . create_compensation ( \"My comp\" , [ \"Chan1\" , \"Chan2\" ], [ 1 , 0.1 , 0 , 1 ]) Update resources att = experiment . get_attachment ( name = \"my_file.txt\" ) att . filename = \"my_new_name.txt\" att . update () # save changes back to CellEngine Operate on resources file1 = experiment . get_fcs_file ( name = \"160311-96plex-4dye\" ) # Get a Pandas dataframe containing an FcsFile's events, subsampled to 10 events events_df = file1 . get_events ( preSubsampleN = 10 ) Delete resources Deleting all resources is final, except for Experiments, Folders and FCS files. Those resources are marked as deleted, then permanently deleted at a later date. To undelete an Experiment, use the .undelete() method. att = experiment . get_attachment ( name = \"my_file.txt\" ) att . delete () experiment . attachments # returns [] More Help GitHub Issues CellEngine API","title":"Home"},{"location":"#cellengine-api-toolkit-for-python","text":"This is the documentation for the Python toolkit for the CellEngine API. For API documentation visit here .","title":"CellEngine API Toolkit for Python"},{"location":"#quick-start","text":"Install cellengine using pip from GitHub: pip install git+https://github.com/primitybio/cellengine-python-toolkit.git","title":"Quick Start"},{"location":"#authentication","text":"import cellengine client = cellengine . APIClient ( username = \"jason\" ) # Password: <enter your password here> # Alternatively, authenticate by setting CELLENGINE_PASSWORD or # CELLENGINE_AUTH_TOKEN in your environment # Get a list of all accessible experiments experiments = client . get_experiments ()","title":"Authentication"},{"location":"#get-resources","text":"All resources have a unique ID stored as _id , e.g. Experiment()._id . Resources can be retrieved by name or by ID: # Get an experiment by its name experiment = client . get_experiment ( name = \"My experiment\" ) experiment = cellengine . Experiment . get ( name = \"My experiment\" ) # or by its ID experiment = client . get_experiment ( \"5f203e852a183003c2459c94\" ) # Get an attachment by name att = experiment . get_attachment ( name = \"my attachment\" ) att = Attachment . get ( experiment . _id , \"my attachment\" ) # or by its ID att = experiment . get_attachment ( \"5f3ac0ba5465db092213cff5\" ) att = client . get_attachment ( experiment . _id , \"5f3ac0ba5465db092213cff5\" )","title":"Get resources"},{"location":"#create-resources","text":"experiment . upload_attachment ( \"path/to/my_file.txt\" ) experiment . create_compensation ( \"My comp\" , [ \"Chan1\" , \"Chan2\" ], [ 1 , 0.1 , 0 , 1 ])","title":"Create resources"},{"location":"#update-resources","text":"att = experiment . get_attachment ( name = \"my_file.txt\" ) att . filename = \"my_new_name.txt\" att . update () # save changes back to CellEngine","title":"Update resources"},{"location":"#operate-on-resources","text":"file1 = experiment . get_fcs_file ( name = \"160311-96plex-4dye\" ) # Get a Pandas dataframe containing an FcsFile's events, subsampled to 10 events events_df = file1 . get_events ( preSubsampleN = 10 )","title":"Operate on resources"},{"location":"#delete-resources","text":"Deleting all resources is final, except for Experiments, Folders and FCS files. Those resources are marked as deleted, then permanently deleted at a later date. To undelete an Experiment, use the .undelete() method. att = experiment . get_attachment ( name = \"my_file.txt\" ) att . delete () experiment . attachments # returns []","title":"Delete resources"},{"location":"#more-help","text":"GitHub Issues CellEngine API","title":"More Help"},{"location":"api_client/","text":"API Client The CellEngine APIClient object is the low-level interface between the CellEngine API and entities in the Python SDK. After authenticating, you may either use the APIClient directly or interact with the higher-level SDK entities. Assuming you have instantiated the APIClient object: import cellengine client = cellengine . APIClient ( \"username\" ) # Password: <enter your password here> # Alternatively, set CELLENGINE_PASSWORD in your environment then the following sequences of commands are equivalent: exp = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcs_file ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = cellengine . FcsFile . get ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = exp . get_fcs_file ( name = \"my fcs file\" ) The APIClient provides higher-level methods for interacting with CellEngine. It also provides _get , _post , _patch , and _delete methods for low-level interaction with the CellEngine API . If there is a higher-level feature that's missing, please feel free to open an Issue in GitHub . Properties base_url (to override the cellengine.com URL, generally for internal use) username password token user_id admin flags authenticated cache_info cache_clear Methods cellengine.APIClient Bases: BaseAPIClient authenticated = self . _authenticate ( self . username , self . password , self . token ) instance-attribute base_url = os . environ . get ( 'CELLENGINE_BASE_URL' , 'https://cellengine.com/api/v1' ) instance-attribute cache_clear = self . _get_id_by_name . cache_clear instance-attribute cache_info = self . _get_id_by_name . cache_info instance-attribute password = password or os . environ . get ( 'CELLENGINE_PASSWORD' ) instance-attribute token = token or os . environ . get ( 'CELLENGINE_AUTH_TOKEN' ) instance-attribute user_id = None instance-attribute username = username or os . environ . get ( 'CELLENGINE_USERNAME' ) instance-attribute apply_tailoring ( experiment_id , gate , fcs_file_ids ) Tailor a gate to a file or files. clone_experiment ( _id , props = {}) create_fcs_file ( experiment_id , body ) Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. Can be used to import files from other experiments. delete_attachment ( experiment_id , _id = None , name = None ) Delete an attachment delete_entity ( experiment_id , entity_type , _id ) delete_experiment ( _id ) Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered. delete_folder ( _id ) Marks the folder as deleted. Deleted folders are permanently deleted after approximately 7 days. Until then, deleted folders can be recovered. delete_gate ( experiment_id , _id = None , gid = None , exclude = None ) Deletes a gate or a tailored gate family. Specify the top-level gid when working with compound gates (specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted). If _id is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experiment_id str ID of experiment. required _id Optional [ str ] ID of the gate to delete. None gid Optional [ str ] ID of gate family to delete. None exclude Optional [ str ] Gate ID to exclude from deletion. Deprecated . Use the untailoring API instead. None Example cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None None delete_gates ( experiment_id , ids ) download_attachment ( experiment_id , _id = None , name = None ) Download an attachment download_fcs_file ( experiment_id , fcs_file_id , ** kwargs ) Download events for a specific FcsFile Parameters: Name Type Description Default experiment_id str ID of the experiment required fcs_file_id str ID of the FcsFile required **kwargs Any compensatedQ (bool): If true, applies the compensation specified in compensationId to the exported events. For TSV format, the numerical values will be the compensated values. For FCS format, the numerical values will be unchanged, but the file header will contain the compensation as the spill string (file-internal compensation). compensationId (str, optional): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If true, a header row containing the channel names will be included. original (bool): If true, the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {} get_attachment ( experiment_id , _id = None , name = None ) get_attachments ( experiment_id ) get_compensation ( experiment_id , _id = None , name = None ) get_compensations ( experiment_id , as_dict = False ) get_experiment ( _id = None , name = None ) get_experiments () get_fcs_file ( experiment_id , _id = None , name = None ) get_fcs_files ( experiment_id , as_dict = False ) get_folder ( _id = None , name = None ) get_folders () get_gate ( experiment_id , _id , as_dict = False ) Gates cannot be retrieved by name. get_gates ( experiment_id , as_dict = False ) get_plot ( experiment_id , fcs_file_id , plot_type , x_channel , y_channel , z_channel = None , population_id = None , compensation = 0 , properties = None , raw = False ) get_population ( experiment_id , _id = None , name = None ) get_populations ( experiment_id ) get_scaleset ( experiment_id ) Get the scaleset for an experiment. get_statistics ( experiment_id , statistics , channels , q = None , annotations = False , compensation_id = UNCOMPENSATED , fcs_file_ids = None , format = 'json' , layout = None , percent_of = 'PARENT' , population_ids = None ) Request Statistics from CellEngine. Parameters: Name Type Description Default experiment_id str ID of the experiment. required statistics List [ str ] Statistics to calculate. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q int quantile (required for \"quantile\" statistic) None channels List [ str ] for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations bool Include file annotations in output (defaults to False). False compensation_id Union [ Compensations , str ] Compensation to use for gating and statistics calculation. Defaults to uncompensated. In addition to a compensation ID, three special constants may be used: UNCOMPENSATED , FILE_INTERNAL or PER_FILE . UNCOMPENSATED fcs_file_ids Optional [ List [ str ]] FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format str str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional [ str ] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional [ Union [ str , List [ str ]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. 'PARENT' population_ids Optional [ List [ str ]] List[str]: List of population IDs. Defaults to ungated. None Returns: Name Type Description statistics Union [ Dict , str , DataFrame ] Dict, String, or pandas.Dataframe post_compensation ( experiment_id , body ) post_experiment ( experiment ) Create a new experiment on CellEngine. post_folder ( folder ) Create a new folder on CellEngine. post_gate ( experiment_id , body , params = {}) post_gates ( experiment_id , body , params = {}) post_population ( experiment_id , population ) update_entity ( experiment_id , _id , entity_type , body ) update_experiment ( _id , body ) update_folder ( _id , body ) update_gate_family ( experiment_id , gid , body = {}) upload_attachment ( experiment_id , filepath , filename = None ) Upload an attachment Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly uploaded Attachment. upload_fcs_file ( experiment_id , filepath_or_data , filename = None ) Upload an FCS file to CellEngine Parameters: Name Type Description Default filepath_or_data Union [ str , BytesIO ] Local path to FCS file. required filename Optional [ str ] Optionally, specify a new name for the file. None Returns: Type Description FcsFile The newly-uploaded FcsFile","title":"API Client"},{"location":"api_client/#api-client","text":"The CellEngine APIClient object is the low-level interface between the CellEngine API and entities in the Python SDK. After authenticating, you may either use the APIClient directly or interact with the higher-level SDK entities. Assuming you have instantiated the APIClient object: import cellengine client = cellengine . APIClient ( \"username\" ) # Password: <enter your password here> # Alternatively, set CELLENGINE_PASSWORD in your environment then the following sequences of commands are equivalent: exp = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcs_file ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = cellengine . FcsFile . get ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = exp . get_fcs_file ( name = \"my fcs file\" ) The APIClient provides higher-level methods for interacting with CellEngine. It also provides _get , _post , _patch , and _delete methods for low-level interaction with the CellEngine API . If there is a higher-level feature that's missing, please feel free to open an Issue in GitHub .","title":"API Client"},{"location":"api_client/#properties","text":"base_url (to override the cellengine.com URL, generally for internal use) username password token user_id admin flags authenticated cache_info cache_clear","title":"Properties"},{"location":"api_client/#methods","text":"","title":"Methods"},{"location":"api_client/#cellengine.APIClient","text":"Bases: BaseAPIClient","title":"APIClient"},{"location":"api_client/#cellengine.APIClient.authenticated","text":"","title":"authenticated"},{"location":"api_client/#cellengine.APIClient.base_url","text":"","title":"base_url"},{"location":"api_client/#cellengine.APIClient.cache_clear","text":"","title":"cache_clear"},{"location":"api_client/#cellengine.APIClient.cache_info","text":"","title":"cache_info"},{"location":"api_client/#cellengine.APIClient.password","text":"","title":"password"},{"location":"api_client/#cellengine.APIClient.token","text":"","title":"token"},{"location":"api_client/#cellengine.APIClient.user_id","text":"","title":"user_id"},{"location":"api_client/#cellengine.APIClient.username","text":"","title":"username"},{"location":"api_client/#cellengine.APIClient.apply_tailoring","text":"Tailor a gate to a file or files.","title":"apply_tailoring()"},{"location":"api_client/#cellengine.APIClient.clone_experiment","text":"","title":"clone_experiment()"},{"location":"api_client/#cellengine.APIClient.create_fcs_file","text":"Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. Can be used to import files from other experiments.","title":"create_fcs_file()"},{"location":"api_client/#cellengine.APIClient.delete_attachment","text":"Delete an attachment","title":"delete_attachment()"},{"location":"api_client/#cellengine.APIClient.delete_entity","text":"","title":"delete_entity()"},{"location":"api_client/#cellengine.APIClient.delete_experiment","text":"Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered.","title":"delete_experiment()"},{"location":"api_client/#cellengine.APIClient.delete_folder","text":"Marks the folder as deleted. Deleted folders are permanently deleted after approximately 7 days. Until then, deleted folders can be recovered.","title":"delete_folder()"},{"location":"api_client/#cellengine.APIClient.delete_gate","text":"Deletes a gate or a tailored gate family. Specify the top-level gid when working with compound gates (specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted). If _id is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experiment_id str ID of experiment. required _id Optional [ str ] ID of the gate to delete. None gid Optional [ str ] ID of gate family to delete. None exclude Optional [ str ] Gate ID to exclude from deletion. Deprecated . Use the untailoring API instead. None Example cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None None","title":"delete_gate()"},{"location":"api_client/#cellengine.APIClient.delete_gates","text":"","title":"delete_gates()"},{"location":"api_client/#cellengine.APIClient.download_attachment","text":"Download an attachment","title":"download_attachment()"},{"location":"api_client/#cellengine.APIClient.download_fcs_file","text":"Download events for a specific FcsFile Parameters: Name Type Description Default experiment_id str ID of the experiment required fcs_file_id str ID of the FcsFile required **kwargs Any compensatedQ (bool): If true, applies the compensation specified in compensationId to the exported events. For TSV format, the numerical values will be the compensated values. For FCS format, the numerical values will be unchanged, but the file header will contain the compensation as the spill string (file-internal compensation). compensationId (str, optional): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If true, a header row containing the channel names will be included. original (bool): If true, the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {}","title":"download_fcs_file()"},{"location":"api_client/#cellengine.APIClient.get_attachment","text":"","title":"get_attachment()"},{"location":"api_client/#cellengine.APIClient.get_attachments","text":"","title":"get_attachments()"},{"location":"api_client/#cellengine.APIClient.get_compensation","text":"","title":"get_compensation()"},{"location":"api_client/#cellengine.APIClient.get_compensations","text":"","title":"get_compensations()"},{"location":"api_client/#cellengine.APIClient.get_experiment","text":"","title":"get_experiment()"},{"location":"api_client/#cellengine.APIClient.get_experiments","text":"","title":"get_experiments()"},{"location":"api_client/#cellengine.APIClient.get_fcs_file","text":"","title":"get_fcs_file()"},{"location":"api_client/#cellengine.APIClient.get_fcs_files","text":"","title":"get_fcs_files()"},{"location":"api_client/#cellengine.APIClient.get_folder","text":"","title":"get_folder()"},{"location":"api_client/#cellengine.APIClient.get_folders","text":"","title":"get_folders()"},{"location":"api_client/#cellengine.APIClient.get_gate","text":"Gates cannot be retrieved by name.","title":"get_gate()"},{"location":"api_client/#cellengine.APIClient.get_gates","text":"","title":"get_gates()"},{"location":"api_client/#cellengine.APIClient.get_plot","text":"","title":"get_plot()"},{"location":"api_client/#cellengine.APIClient.get_population","text":"","title":"get_population()"},{"location":"api_client/#cellengine.APIClient.get_populations","text":"","title":"get_populations()"},{"location":"api_client/#cellengine.APIClient.get_scaleset","text":"Get the scaleset for an experiment.","title":"get_scaleset()"},{"location":"api_client/#cellengine.APIClient.get_statistics","text":"Request Statistics from CellEngine. Parameters: Name Type Description Default experiment_id str ID of the experiment. required statistics List [ str ] Statistics to calculate. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q int quantile (required for \"quantile\" statistic) None channels List [ str ] for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations bool Include file annotations in output (defaults to False). False compensation_id Union [ Compensations , str ] Compensation to use for gating and statistics calculation. Defaults to uncompensated. In addition to a compensation ID, three special constants may be used: UNCOMPENSATED , FILE_INTERNAL or PER_FILE . UNCOMPENSATED fcs_file_ids Optional [ List [ str ]] FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format str str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional [ str ] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional [ Union [ str , List [ str ]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. 'PARENT' population_ids Optional [ List [ str ]] List[str]: List of population IDs. Defaults to ungated. None Returns: Name Type Description statistics Union [ Dict , str , DataFrame ] Dict, String, or pandas.Dataframe","title":"get_statistics()"},{"location":"api_client/#cellengine.APIClient.post_compensation","text":"","title":"post_compensation()"},{"location":"api_client/#cellengine.APIClient.post_experiment","text":"Create a new experiment on CellEngine.","title":"post_experiment()"},{"location":"api_client/#cellengine.APIClient.post_folder","text":"Create a new folder on CellEngine.","title":"post_folder()"},{"location":"api_client/#cellengine.APIClient.post_gate","text":"","title":"post_gate()"},{"location":"api_client/#cellengine.APIClient.post_gates","text":"","title":"post_gates()"},{"location":"api_client/#cellengine.APIClient.post_population","text":"","title":"post_population()"},{"location":"api_client/#cellengine.APIClient.update_entity","text":"","title":"update_entity()"},{"location":"api_client/#cellengine.APIClient.update_experiment","text":"","title":"update_experiment()"},{"location":"api_client/#cellengine.APIClient.update_folder","text":"","title":"update_folder()"},{"location":"api_client/#cellengine.APIClient.update_gate_family","text":"","title":"update_gate_family()"},{"location":"api_client/#cellengine.APIClient.upload_attachment","text":"Upload an attachment Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly uploaded Attachment.","title":"upload_attachment()"},{"location":"api_client/#cellengine.APIClient.upload_fcs_file","text":"Upload an FCS file to CellEngine Parameters: Name Type Description Default filepath_or_data Union [ str , BytesIO ] Local path to FCS file. required filename Optional [ str ] Optionally, specify a new name for the file. None Returns: Type Description FcsFile The newly-uploaded FcsFile","title":"upload_fcs_file()"},{"location":"attachments/","text":"Attachments CellEngine API: Attachments Attachments are non-data files stored in an experiment. Properties Properties are getter and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented in the CellEngine API unless otherwise noted. Methods cellengine.resources.attachment.Attachment A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment. crc32c : str property created : datetime property experiment_id : str property filename : str property writable id : str property Alias for _id . md5 : str property size : int property delete () download ( to_file = None ) Download the attachment. Defaults to returning the file as a blob. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Path at which to save the file. Accepts relative or absolute paths. None Returns: Name Type Description content Optional [ bytes ] The raw response content. get ( experiment_id , _id = None , name = None ) classmethod Get an Attachment by name or ID for a specific experiment. Either name or _id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id optional ID of the attachment. None name optional Name of the attachment. None update () Save changes to this Attachment to CellEngine. upload ( experiment_id , filepath , filename = None ) staticmethod Upload an attachment Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly uploaded Attachment.","title":"Attachments"},{"location":"attachments/#attachments","text":"CellEngine API: Attachments Attachments are non-data files stored in an experiment.","title":"Attachments"},{"location":"attachments/#properties","text":"Properties are getter and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented in the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"attachments/#methods","text":"","title":"Methods"},{"location":"attachments/#cellengine.resources.attachment.Attachment","text":"A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment.","title":"Attachment"},{"location":"attachments/#cellengine.resources.attachment.Attachment.crc32c","text":"","title":"crc32c"},{"location":"attachments/#cellengine.resources.attachment.Attachment.created","text":"","title":"created"},{"location":"attachments/#cellengine.resources.attachment.Attachment.experiment_id","text":"","title":"experiment_id"},{"location":"attachments/#cellengine.resources.attachment.Attachment.filename","text":"","title":"filename"},{"location":"attachments/#cellengine.resources.attachment.Attachment.id","text":"Alias for _id .","title":"id"},{"location":"attachments/#cellengine.resources.attachment.Attachment.md5","text":"","title":"md5"},{"location":"attachments/#cellengine.resources.attachment.Attachment.size","text":"","title":"size"},{"location":"attachments/#cellengine.resources.attachment.Attachment.delete","text":"","title":"delete()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.download","text":"Download the attachment. Defaults to returning the file as a blob. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Path at which to save the file. Accepts relative or absolute paths. None Returns: Name Type Description content Optional [ bytes ] The raw response content.","title":"download()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.get","text":"Get an Attachment by name or ID for a specific experiment. Either name or _id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id optional ID of the attachment. None name optional Name of the attachment. None","title":"get()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.update","text":"Save changes to this Attachment to CellEngine.","title":"update()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.upload","text":"Upload an attachment Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly uploaded Attachment.","title":"upload()"},{"location":"compensations/","text":"Compensations CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\" or \"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Special Constants cellengine . UNCOMPENSATED : UncompensatedType = 0 module-attribute Apply no compensation. cellengine . FILE_INTERNAL : FileInternalType = - 1 module-attribute Use the file's internal compensation matrix, if available. If not available, an error will be returned from API requests. cellengine . PER_FILE : PerFileType = - 2 module-attribute Use the compensation assigned to each individual FCS file. Not a valid value for FcsFile.compensation . Methods cellengine.resources.compensation.Compensation A class representing a CellEngine compensation matrix. N property channels : List [ str ] property writable dataframe : DataFrame property writable dataframe_as_html property Return the compensation matrix dataframe as HTML. experiment_id : str property id : str property Alias for _id . name : str property writable spill_matrix : List [ float ] property writable apply ( file , inplace = True , ** kwargs ) Compensate an FcsFile's data. Parameters: Name Type Description Default file FcsFile The FcsFile to compensate. required inplace bool If True, modify the FcsFile.events with the result. If False, return the compensated events. True **kwargs Dict All arguments accepted by FcsFile.get_events are accepted here. If the file's events have already been retrieved with the same kwargs provided here, those stored events will be used. Otherwise, the file's events will be retrieved from CellEngine. {} Returns: DataFrame: if inplace=True , updates FcsFile.events for the target FcsFile create ( experiment_id , name , channels = None , spill_matrix = None , dataframe = None ) classmethod Create a new compensation. Specify either dataframe or channels and spill_matrix. Parameters: Name Type Description Default experiment_id str the ID of the experiment. required name str The name of the compensation. required channels List [ str ] The names of the channels to which this compensation matrix applies. None spill_matrix List [ float ] The row-wise, square spillover matrix. The length of the array must be the number of channels squared. None dataframe DataFrame A square pandas DataFrame with channel names in [df.index, df.columns]. None delete () from_spill_string ( spill_string ) staticmethod Creates a Compensation from a spill string (a file-internal compensation). This can be used with FcsFile.spill_string. The compensation is not saved to CellEngine. get ( experiment_id , _id = None , name = None ) classmethod update () Save changes to this Compensation to CellEngine.","title":"Compensations"},{"location":"compensations/#compensations","text":"CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\" or \"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame.","title":"Compensations"},{"location":"compensations/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"compensations/#special-constants","text":"","title":"Special Constants"},{"location":"compensations/#cellengine.UNCOMPENSATED","text":"Apply no compensation.","title":"UNCOMPENSATED"},{"location":"compensations/#cellengine.FILE_INTERNAL","text":"Use the file's internal compensation matrix, if available. If not available, an error will be returned from API requests.","title":"FILE_INTERNAL"},{"location":"compensations/#cellengine.PER_FILE","text":"Use the compensation assigned to each individual FCS file. Not a valid value for FcsFile.compensation .","title":"PER_FILE"},{"location":"compensations/#methods","text":"","title":"Methods"},{"location":"compensations/#cellengine.resources.compensation.Compensation","text":"A class representing a CellEngine compensation matrix.","title":"Compensation"},{"location":"compensations/#cellengine.resources.compensation.Compensation.N","text":"","title":"N"},{"location":"compensations/#cellengine.resources.compensation.Compensation.channels","text":"","title":"channels"},{"location":"compensations/#cellengine.resources.compensation.Compensation.dataframe","text":"","title":"dataframe"},{"location":"compensations/#cellengine.resources.compensation.Compensation.dataframe_as_html","text":"Return the compensation matrix dataframe as HTML.","title":"dataframe_as_html"},{"location":"compensations/#cellengine.resources.compensation.Compensation.experiment_id","text":"","title":"experiment_id"},{"location":"compensations/#cellengine.resources.compensation.Compensation.id","text":"Alias for _id .","title":"id"},{"location":"compensations/#cellengine.resources.compensation.Compensation.name","text":"","title":"name"},{"location":"compensations/#cellengine.resources.compensation.Compensation.spill_matrix","text":"","title":"spill_matrix"},{"location":"compensations/#cellengine.resources.compensation.Compensation.apply","text":"Compensate an FcsFile's data. Parameters: Name Type Description Default file FcsFile The FcsFile to compensate. required inplace bool If True, modify the FcsFile.events with the result. If False, return the compensated events. True **kwargs Dict All arguments accepted by FcsFile.get_events are accepted here. If the file's events have already been retrieved with the same kwargs provided here, those stored events will be used. Otherwise, the file's events will be retrieved from CellEngine. {} Returns: DataFrame: if inplace=True , updates FcsFile.events for the target FcsFile","title":"apply()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.create","text":"Create a new compensation. Specify either dataframe or channels and spill_matrix. Parameters: Name Type Description Default experiment_id str the ID of the experiment. required name str The name of the compensation. required channels List [ str ] The names of the channels to which this compensation matrix applies. None spill_matrix List [ float ] The row-wise, square spillover matrix. The length of the array must be the number of channels squared. None dataframe DataFrame A square pandas DataFrame with channel names in [df.index, df.columns]. None","title":"create()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.delete","text":"","title":"delete()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.from_spill_string","text":"Creates a Compensation from a spill string (a file-internal compensation). This can be used with FcsFile.spill_string. The compensation is not saved to CellEngine.","title":"from_spill_string()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.get","text":"","title":"get()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.update","text":"Save changes to this Compensation to CellEngine.","title":"update()"},{"location":"contributing/","text":"Contributing If you find an issue, please open an issue in GitHub . We welcome PRs, but encourage opening an issue to discuss changes in advance. We use pytest for testing, and black for code style.","title":"Development"},{"location":"contributing/#contributing","text":"If you find an issue, please open an issue in GitHub . We welcome PRs, but encourage opening an issue to discuss changes in advance. We use pytest for testing, and black for code style.","title":"Contributing"},{"location":"experiments/","text":"Experiments CellEngine API: Experiments An Experiment is the primary unit of organization in CellEngine and contains FCS files, gates, populations, etc. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment . Most methods available from the APIClient are available on an Experiment , with the first param experiment_id implicitly passed as the current experiment's ID. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.experiment.Experiment The main container for an analysis. Don't construct directly; use Experiment.create or Experiment.get . Not all properties have full support in the Python toolkit. Please open an issue if you need to use a property that is not supported. active_compensation : Union [ Compensations , str ] property writable analysis_source_experiment : Union [ str , None ] property analysis_task : Union [ str , None ] property attachments : List [ Attachment ] property List all attachments on the experiment. clone_source_experiment : Union [ str , None ] property color_spec : List [ Tuple [ str , Tuple [ Union [ str , None ], float ]]] property writable comments : List [ Dict [ str , Any ]] property writable Comments for experiment. Defaults to overwrite; append new comments with experiment.comments.append(dict) with the form: dict = { \"insert\" : \"some text\" , \"attributes\" : { \"bold\" : False , \"italic\" : False , \"underline\" : False } } compensations : List [ Compensation ] property List all compensations on the experiment. created : datetime property data : Dict [ str , Any ] property writable data_order : List [ str ] property writable deep_updated : datetime property deleted : Union [ datetime , None ] property writable fcs_files : List [ FcsFile ] property List all FCS files on the experiment. gates : List [ Gate ] property List all gates on the experiment. id : str property Alias for _id . locked : bool property writable name : str property writable palettes : Dict [ str , Any ] property writable path : List [ str ] property writable per_file_compensations_enabled : bool property writable permissions : List [ Dict [ str , Any ]] property populations : List [ Population ] property List all populations in the experiment. primary_researcher : Dict [ str , Any ] property writable When setting this value, use the user's _id . retention_policy : Dict [ str , Any ] property revision_source_experiment : Union [ str , None ] property revisions : List [ Dict [ str , Any ]] property saved_statistics_exports : List [ Dict [ str , Any ]] property writable scaleset : ScaleSet property Gets the experiment's ScaleSet sorting_spec : Dict [ str , List [ Union [ str , None ]]] property writable tags : List [ str ] property writable uploader : Dict [ str , Any ] property clone ( props = {}) Saves a deep copy of the experiment and all of its resources, including attachments, FCS files, gates and populations. Parameters: Name Type Description Default props Dict [ str , Any ] Optional keys are: name (str): The name to give the new experiment. Defaults to \"[Original Experiment]-1\" path (List[str]): Array of folder IDs comprising the path. {} Returns: Name Type Description Experiment Experiment A deep copy of the experiment. create ( name = None , comments = None , uploader = None , primary_researcher = None , tags = [], path = []) staticmethod Creates a new experiment. Parameters: Name Type Description Default name Optional [ str ] Defaults to \"Untitled Experiment\". None comments Optional [ str ] Defaults to None. None uploader Optional [ str ] Defaults to the authenticated user. None primary_researcher Optional [ str ] Defaults to the authenticated user. None tags List [ str ] Defaults to empty list. [] path List [ str ] List of folder IDs comprising the path. Defaults to [] (root). [] Returns: Type Description Experiment The created Experiment. create_compensation ( name , channels = None , spill_matrix = None , dataframe = None ) Create a new compensation. Specify either dataframe or channels and spill_matrix. Parameters: Name Type Description Default name str The name of the compensation. required channels List [ str ] The names of the channels to which this compensation matrix applies. None spill_matrix List [ float ] The row-wise, square spillover matrix. The length of the array must be the number of channels squared. None dataframe DataFrame A square pandas DataFrame with channel names in [df.index, df.columns]. None create_ellipse_gate ( * args , create_population = True , ** kwargs ) Create an EllipseGate. Accepts all args and kwargs available for EllipseGate.create() . create_gates ( gates ) Save a collection of gate objects. create_polygon_gate ( * args , create_population = True , ** kwargs ) Create a PolygonGate. Accepts all args and kwargs available for PolygonGate.create() . create_population ( population ) Create a population. Parameters: Name Type Description Default population dict The population to create. Use the ComplexPopulationBuilder to construct a complex population. required Examples: experiment . create_population ({ \"name\" : name , \"terminalGateGid\" : GID , \"parentId\" : parent . _id , \"gates\" : json . dumps ({ \"$and\" : AND_GATES }) }) Returns: Type Description Population The new population. create_quadrant_gate ( * args , create_population = True , ** kwargs ) Create a QuadrantGate. Accepts all args and kwargs available for QuadrantGate.create() . create_range_gate ( * args , create_population = True , ** kwargs ) Create a RangeGate. Accepts all args and kwargs available for RangeGate.create() . create_rectangle_gate ( * args , create_population = True , ** kwargs ) Create a RectangleGate. Accepts all args and kwargs available for RectangleGate.create() . create_split_gate ( * args , create_population = True , ** kwargs ) Create a SplitGate. Accepts all args and kwargs available for SplitGate.create() . delete () Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered. delete_attachment ( _id = None , name = None ) Delete an attachment from this experiment. delete_gate ( _id = None , gid = None , exclude = None ) Delete a gate or gate family. See the APIClient for more information. delete_gates ( ids ) Deletes multiple gates provided a list of _ids. download_attachment ( _id = None , name = None ) Get a specific attachment. get ( _id = None , name = None ) staticmethod get_attachment ( _id = None , name = None ) get_compensation ( _id = None , name = None ) Get a specific compensation. get_fcs_file ( _id = None , name = None ) Get a specific FCS file. get_gate ( _id = None , name = None ) Get a specific gate. get_population ( _id = None , name = None ) Get a specific population. get_scaleset () get_statistics ( statistics , channels , q = None , annotations = True , compensation_id = UNCOMPENSATED , fcs_file_ids = None , format = 'pandas' , layout = 'medium' , percent_of = 'PARENT' , population_ids = []) undelete () Clears a scheduled deletion. update () Save the specified changes to CellEngine and update this instance with the new values on success. Example: experiment . update ({ \"name\" : \"New Name\" }) assert experiment . name == \"New Name\" upload_attachment ( filepath , filename = None ) Upload an attachment to this experiment. Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly uploaded Attachment. upload_fcs_file ( filepath , filename = None ) Upload an FCS file to this experiment.","title":"Experiments"},{"location":"experiments/#experiments","text":"CellEngine API: Experiments An Experiment is the primary unit of organization in CellEngine and contains FCS files, gates, populations, etc. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment . Most methods available from the APIClient are available on an Experiment , with the first param experiment_id implicitly passed as the current experiment's ID.","title":"Experiments"},{"location":"experiments/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"experiments/#methods","text":"","title":"Methods"},{"location":"experiments/#cellengine.resources.experiment.Experiment","text":"The main container for an analysis. Don't construct directly; use Experiment.create or Experiment.get . Not all properties have full support in the Python toolkit. Please open an issue if you need to use a property that is not supported.","title":"Experiment"},{"location":"experiments/#cellengine.resources.experiment.Experiment.active_compensation","text":"","title":"active_compensation"},{"location":"experiments/#cellengine.resources.experiment.Experiment.analysis_source_experiment","text":"","title":"analysis_source_experiment"},{"location":"experiments/#cellengine.resources.experiment.Experiment.analysis_task","text":"","title":"analysis_task"},{"location":"experiments/#cellengine.resources.experiment.Experiment.attachments","text":"List all attachments on the experiment.","title":"attachments"},{"location":"experiments/#cellengine.resources.experiment.Experiment.clone_source_experiment","text":"","title":"clone_source_experiment"},{"location":"experiments/#cellengine.resources.experiment.Experiment.color_spec","text":"","title":"color_spec"},{"location":"experiments/#cellengine.resources.experiment.Experiment.comments","text":"Comments for experiment. Defaults to overwrite; append new comments with experiment.comments.append(dict) with the form: dict = { \"insert\" : \"some text\" , \"attributes\" : { \"bold\" : False , \"italic\" : False , \"underline\" : False } }","title":"comments"},{"location":"experiments/#cellengine.resources.experiment.Experiment.compensations","text":"List all compensations on the experiment.","title":"compensations"},{"location":"experiments/#cellengine.resources.experiment.Experiment.created","text":"","title":"created"},{"location":"experiments/#cellengine.resources.experiment.Experiment.data","text":"","title":"data"},{"location":"experiments/#cellengine.resources.experiment.Experiment.data_order","text":"","title":"data_order"},{"location":"experiments/#cellengine.resources.experiment.Experiment.deep_updated","text":"","title":"deep_updated"},{"location":"experiments/#cellengine.resources.experiment.Experiment.deleted","text":"","title":"deleted"},{"location":"experiments/#cellengine.resources.experiment.Experiment.fcs_files","text":"List all FCS files on the experiment.","title":"fcs_files"},{"location":"experiments/#cellengine.resources.experiment.Experiment.gates","text":"List all gates on the experiment.","title":"gates"},{"location":"experiments/#cellengine.resources.experiment.Experiment.id","text":"Alias for _id .","title":"id"},{"location":"experiments/#cellengine.resources.experiment.Experiment.locked","text":"","title":"locked"},{"location":"experiments/#cellengine.resources.experiment.Experiment.name","text":"","title":"name"},{"location":"experiments/#cellengine.resources.experiment.Experiment.palettes","text":"","title":"palettes"},{"location":"experiments/#cellengine.resources.experiment.Experiment.path","text":"","title":"path"},{"location":"experiments/#cellengine.resources.experiment.Experiment.per_file_compensations_enabled","text":"","title":"per_file_compensations_enabled"},{"location":"experiments/#cellengine.resources.experiment.Experiment.permissions","text":"","title":"permissions"},{"location":"experiments/#cellengine.resources.experiment.Experiment.populations","text":"List all populations in the experiment.","title":"populations"},{"location":"experiments/#cellengine.resources.experiment.Experiment.primary_researcher","text":"When setting this value, use the user's _id .","title":"primary_researcher"},{"location":"experiments/#cellengine.resources.experiment.Experiment.retention_policy","text":"","title":"retention_policy"},{"location":"experiments/#cellengine.resources.experiment.Experiment.revision_source_experiment","text":"","title":"revision_source_experiment"},{"location":"experiments/#cellengine.resources.experiment.Experiment.revisions","text":"","title":"revisions"},{"location":"experiments/#cellengine.resources.experiment.Experiment.saved_statistics_exports","text":"","title":"saved_statistics_exports"},{"location":"experiments/#cellengine.resources.experiment.Experiment.scaleset","text":"Gets the experiment's ScaleSet","title":"scaleset"},{"location":"experiments/#cellengine.resources.experiment.Experiment.sorting_spec","text":"","title":"sorting_spec"},{"location":"experiments/#cellengine.resources.experiment.Experiment.tags","text":"","title":"tags"},{"location":"experiments/#cellengine.resources.experiment.Experiment.uploader","text":"","title":"uploader"},{"location":"experiments/#cellengine.resources.experiment.Experiment.clone","text":"Saves a deep copy of the experiment and all of its resources, including attachments, FCS files, gates and populations. Parameters: Name Type Description Default props Dict [ str , Any ] Optional keys are: name (str): The name to give the new experiment. Defaults to \"[Original Experiment]-1\" path (List[str]): Array of folder IDs comprising the path. {} Returns: Name Type Description Experiment Experiment A deep copy of the experiment.","title":"clone()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create","text":"Creates a new experiment. Parameters: Name Type Description Default name Optional [ str ] Defaults to \"Untitled Experiment\". None comments Optional [ str ] Defaults to None. None uploader Optional [ str ] Defaults to the authenticated user. None primary_researcher Optional [ str ] Defaults to the authenticated user. None tags List [ str ] Defaults to empty list. [] path List [ str ] List of folder IDs comprising the path. Defaults to [] (root). [] Returns: Type Description Experiment The created Experiment.","title":"create()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_compensation","text":"Create a new compensation. Specify either dataframe or channels and spill_matrix. Parameters: Name Type Description Default name str The name of the compensation. required channels List [ str ] The names of the channels to which this compensation matrix applies. None spill_matrix List [ float ] The row-wise, square spillover matrix. The length of the array must be the number of channels squared. None dataframe DataFrame A square pandas DataFrame with channel names in [df.index, df.columns]. None","title":"create_compensation()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_ellipse_gate","text":"Create an EllipseGate. Accepts all args and kwargs available for EllipseGate.create() .","title":"create_ellipse_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_gates","text":"Save a collection of gate objects.","title":"create_gates()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_polygon_gate","text":"Create a PolygonGate. Accepts all args and kwargs available for PolygonGate.create() .","title":"create_polygon_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_population","text":"Create a population. Parameters: Name Type Description Default population dict The population to create. Use the ComplexPopulationBuilder to construct a complex population. required Examples: experiment . create_population ({ \"name\" : name , \"terminalGateGid\" : GID , \"parentId\" : parent . _id , \"gates\" : json . dumps ({ \"$and\" : AND_GATES }) }) Returns: Type Description Population The new population.","title":"create_population()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_quadrant_gate","text":"Create a QuadrantGate. Accepts all args and kwargs available for QuadrantGate.create() .","title":"create_quadrant_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_range_gate","text":"Create a RangeGate. Accepts all args and kwargs available for RangeGate.create() .","title":"create_range_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_rectangle_gate","text":"Create a RectangleGate. Accepts all args and kwargs available for RectangleGate.create() .","title":"create_rectangle_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_split_gate","text":"Create a SplitGate. Accepts all args and kwargs available for SplitGate.create() .","title":"create_split_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete","text":"Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered.","title":"delete()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete_attachment","text":"Delete an attachment from this experiment.","title":"delete_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete_gate","text":"Delete a gate or gate family. See the APIClient for more information.","title":"delete_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete_gates","text":"Deletes multiple gates provided a list of _ids.","title":"delete_gates()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.download_attachment","text":"Get a specific attachment.","title":"download_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get","text":"","title":"get()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_attachment","text":"","title":"get_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_compensation","text":"Get a specific compensation.","title":"get_compensation()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_fcs_file","text":"Get a specific FCS file.","title":"get_fcs_file()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_gate","text":"Get a specific gate.","title":"get_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_population","text":"Get a specific population.","title":"get_population()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_scaleset","text":"","title":"get_scaleset()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_statistics","text":"","title":"get_statistics()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.undelete","text":"Clears a scheduled deletion.","title":"undelete()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.update","text":"Save the specified changes to CellEngine and update this instance with the new values on success. Example: experiment . update ({ \"name\" : \"New Name\" }) assert experiment . name == \"New Name\"","title":"update()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.upload_attachment","text":"Upload an attachment to this experiment. Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly uploaded Attachment.","title":"upload_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.upload_fcs_file","text":"Upload an FCS file to this experiment.","title":"upload_fcs_file()"},{"location":"fcs_files/","text":"FcsFiles CellEngine API: Fcs Files FCS files are the standard data representation for flow cytometry. In CellEngine, an FcsFile resource represents the file itself, along with metadata such as the panel and annotations. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.fcs_file.FcsFile A class representing a CellEngine FCS file. annotations : List [ Annotations ] property channels : List [ str ] property Return all channels in the file compensation : Union [ FileCompensations , None ] property crc32c : str property data : Dict [ str , Any ] property deleted : Union [ datetime , None ] property writable event_count : int property events property A DataFrame containing this file's events (typically cells). This is the last result from FcsFile.get_events(inplace=True) . If that method has not been called, a DataFrame will be fetched with all events (ungated, no compensation, no subsampling). To fetch events with subsampling, compensation and/or gating to a specific population, use FcsFile.get_events() . experiment_id : str property filename : str property writable gates_locked : bool property writable has_file_internal_comp : bool property header : Dict [ str , str ] property Note: this property may be fetched lazily. id : str property Alias for _id . is_control : bool property md5 : str property name : str property writable Alias for filename . panel : List [ Channel ] property panel_name : str property sample_name : Optional [ str ] property size : int property spill_string : str property Note: this property may be fetched lazily. channel_for_reagent ( reagent ) Returns the channel name ( $PnN ) for the given reagent ( $PnS). Returns None` if the channel isn't found. create ( experiment_id , fcs_files = None , filename = None , add_file_number = False , add_event_number = False , pre_subsample_n = None , pre_subsample_p = None , seed = None ) classmethod Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments, or by importing from an S3-compatible service. When concatenating and subsampling at the same time, subsampling is applied to each file before concatenating. If addFileNumber is true, a file number column (channel) will be added to the output file indicating which file each event (cell) came from. The values in this column have a uniform random spread (\u00b10.25 of the integer value) to aid visualization. While this column can be useful for analysis, it will cause the experiment to have FCS files with different panels unless all FCS files that have not been concatenated are deleted. During concatenation, any FCS header parameters that do not match between files will be removed, with some exceptions: $BTIM (clock time at beginning of acquisition) and $DATE will be set to the earliest value among the input files. $ETIM (clock time at end of acquisition) will be set to the latest value among the input files. $PnR (range for parameter n) will be set to the highest value among the input files. All channels present in the first FCS file in the fcsFiles parameter must also be present in the other FCS files. When importing from an S3-compatible service, be aware of the following: Only a single file can be imported at a time. The host property must include the bucket and region as applicable. For example, for AWS, this would look like \"mybucket.s3.us-east-2.amazonaws.com\". The path property must specify the full path to the object, e.g. \"/Study001/Specimen01.fcs\". Importing private S3 objects requires an accessKey and a secretKey for a user with appropriate permissions. For AWS, GetObject is required. Importing objects may incur fees from the S3 service provider. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required fcs_files Optional [ Union [ str , List [ str ], Dict [ str , str ]]] ID of file or list of IDs of files or objects to process. If more than one file is provided, they will be concatenated in order. To import files from other experiments, pass a list of dicts with _id and experimentId properties. To import a file from an S3-compatible service, provide a Dict with keys \"host\" and \"path\" ; if the S3 object is private, additionally provide \"access_key\" and \"secret_key\" . None filename Optional [ str ] Rename the uploaded file. None add_file_number Optional [ bool ] If concatenating files, adds a file number channel to the resulting file. False add_event_number Optional [ bool ] Add an event number column to the exported file. This number corresponds to the index of the event in the original file; when concatenating files, the same event number will appear more than once. False pre_subsample_n Optional [ int ] Randomly subsample the file to contain this many events. None pre_subsample_p Optional [ float ] Randomly subsample the file to contain this percent of events (0 to 1). None seed Optional [ int ] Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. None Returns: Type Description FcsFile FcsFile create_from_dataframe ( experiment_id , filename , df , reagents = None , headers = {}) classmethod Creates an FCS file from a DataFrame and uploads it CellEngine. Channel names ( $PnN values such as \"FITC-A\" or \"530/30-A\") are read from the DataFrame column names. Reagent names ( $PnS values such as \"CD3\") are optional and are read from the 2nd-level index of the DataFrame if present, or can be provided in a list in the same order as the channels via the reagents argument. Additional header keys can be provided via headers . In particular, it can be useful to set $PnD values, which CellEngine uses to set the initial display scaling: For linear scales, set \"$PnD\": \"Linear,<min>,<max>\" (e.g. \"Linear,-200,50000\" for a linear scale ranging from -200 to 50,000). For logarithmic scales, set \"$PnD\": \"Logarithmic,<decades>,<min>\" (e.g. \"Logarithmic,4,0.1\" for a logarithmic scale ranging from 0.1 to 1000). For arcsinh scales, leave \"$PnD\" unset. Aside from several heuristics, CellEngine will usually default to arcsinh with a max equal to the \"$PnR\" value. FCS files created with this method always use float32 encoding. For efficiency, consider using float32 arrays upstream when generating the FCS file values. Examples: With reagents specified in a multi-level index: df = pandas . DataFrame ( np . random . randn ( 6 , 3 ), columns = [[ \"Ax488-A\" , \"PE-A\" , \"Cluster ID\" ], [ \"CD3\" , \"CD4\" , None ]], dtype = \"float32\" ) FcsFile . create_from_dataframe ( experiment_id , \"myfile.fcs\" , df , headers = { \"P3D\" : \"Linear,0,20\" } ) With reagents specified in the reagents argument: df = pandas . DataFrame ( np . random . randn ( 6 , 3 ), columns = [ \"Ax488-A\" , \"PE-A\" , \"Cluster ID\" ], dtype = \"float32\" ) FcsFile . create_from_dataframe ( experiment_id , \"myfile.fcs\" , df , reagents = [ \"CD3\" , \"CD4\" , None ], headers = { \"P3D\" : \"Linear,0,20\" } ) Factorize categorical data into numbers for encoding as FCS: df = pandas . DataFrame ( [[ 1.0 , \"T cell\" , 1 ], [ 2.0 , \"T cell\" , 2 ], [ 3.0 , \"B cell\" , 3 ], [ 4.0 , \"T cell\" , 4 ]], columns = [ \"Ax488-A\" , \"Cell Type\" , \"Cluster ID\" ] ) df [ \"Cell Type\" ], cell_type_index = pandas . factorize ( df [ \"Cell Type\" ]) created = FcsFile . create_from_dataframe ( blank_experiment . _id , \"myfile.fcs\" , df , headers = { \"$P2D\" : \"Linear,0,10\" , \"$P3D\" : \"Linear,0,10\" } ) Returns: The created FCS file. delete () get ( experiment_id , _id = None , name = None ) classmethod get_events ( inplace = False , destination = None , ** kwargs ) Fetch a DataFrame containing this file's data. The returned DataFrame uses the channel names ( $PnN values) for column names because, unlike reagent names ( $PnS ), they are required and must be unique. To find the $PnN value for a given reagent name ( $PnS ), use fcs_file.channel_for_reagent(reagent) . Parameters: Name Type Description Default inplace Optional [ bool ] bool False **kwargs Any compensatedQ (bool): If True , applies the compensation specified in compensationId to the exported events. The numerical values will be unchanged, but the file header will contain the compensation as the spill string. compensationId ([int, str]): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If True , a header row containing the channel names will be included. original (bool): If True , the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. The Python toolkit uses the FlowIO library, which cannot parse as many FCS files as CellEngine can. Setting this parameter to True can cause parsing errors. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {} Returns: Name Type Description DataFrame Union [ DataFrame , None] This file's data, with query parameters applied. Union [ DataFrame , None] If inplace=True, it updates the self.events property. Union [ DataFrame , None] If destination is a string, saves file to the destination and returns None. get_file_internal_compensation () Get the file-internal Compensation. plot ( plot_type , x_channel , y_channel , z_channel = None , population_id = None , compensation = 0 , ** kwargs ) Build a plot for an FcsFile. See Plot.get() for more information. update () Save changes to this FcsFile to CellEngine. upload ( experiment_id , filepath ) classmethod Uploads a file. The maximum file size is approximately 2.3 GB. Contact us if you need to work with larger files. Automatically parses panels and annotations and updates ScaleSets to include all channels in the file. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required filepath str The file contents. required","title":"FcsFiles"},{"location":"fcs_files/#fcsfiles","text":"CellEngine API: Fcs Files FCS files are the standard data representation for flow cytometry. In CellEngine, an FcsFile resource represents the file itself, along with metadata such as the panel and annotations.","title":"FcsFiles"},{"location":"fcs_files/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"fcs_files/#methods","text":"","title":"Methods"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile","text":"A class representing a CellEngine FCS file.","title":"FcsFile"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.annotations","text":"","title":"annotations"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.channels","text":"Return all channels in the file","title":"channels"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.compensation","text":"","title":"compensation"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.crc32c","text":"","title":"crc32c"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.data","text":"","title":"data"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.deleted","text":"","title":"deleted"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.event_count","text":"","title":"event_count"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.events","text":"A DataFrame containing this file's events (typically cells). This is the last result from FcsFile.get_events(inplace=True) . If that method has not been called, a DataFrame will be fetched with all events (ungated, no compensation, no subsampling). To fetch events with subsampling, compensation and/or gating to a specific population, use FcsFile.get_events() .","title":"events"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.experiment_id","text":"","title":"experiment_id"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.filename","text":"","title":"filename"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.gates_locked","text":"","title":"gates_locked"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.has_file_internal_comp","text":"","title":"has_file_internal_comp"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.header","text":"Note: this property may be fetched lazily.","title":"header"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.id","text":"Alias for _id .","title":"id"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.is_control","text":"","title":"is_control"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.md5","text":"","title":"md5"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.name","text":"Alias for filename .","title":"name"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.panel","text":"","title":"panel"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.panel_name","text":"","title":"panel_name"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.sample_name","text":"","title":"sample_name"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.size","text":"","title":"size"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.spill_string","text":"Note: this property may be fetched lazily.","title":"spill_string"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.channel_for_reagent","text":"Returns the channel name ( $PnN ) for the given reagent ( $PnS). Returns None` if the channel isn't found.","title":"channel_for_reagent()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.create","text":"Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments, or by importing from an S3-compatible service. When concatenating and subsampling at the same time, subsampling is applied to each file before concatenating. If addFileNumber is true, a file number column (channel) will be added to the output file indicating which file each event (cell) came from. The values in this column have a uniform random spread (\u00b10.25 of the integer value) to aid visualization. While this column can be useful for analysis, it will cause the experiment to have FCS files with different panels unless all FCS files that have not been concatenated are deleted. During concatenation, any FCS header parameters that do not match between files will be removed, with some exceptions: $BTIM (clock time at beginning of acquisition) and $DATE will be set to the earliest value among the input files. $ETIM (clock time at end of acquisition) will be set to the latest value among the input files. $PnR (range for parameter n) will be set to the highest value among the input files. All channels present in the first FCS file in the fcsFiles parameter must also be present in the other FCS files. When importing from an S3-compatible service, be aware of the following: Only a single file can be imported at a time. The host property must include the bucket and region as applicable. For example, for AWS, this would look like \"mybucket.s3.us-east-2.amazonaws.com\". The path property must specify the full path to the object, e.g. \"/Study001/Specimen01.fcs\". Importing private S3 objects requires an accessKey and a secretKey for a user with appropriate permissions. For AWS, GetObject is required. Importing objects may incur fees from the S3 service provider. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required fcs_files Optional [ Union [ str , List [ str ], Dict [ str , str ]]] ID of file or list of IDs of files or objects to process. If more than one file is provided, they will be concatenated in order. To import files from other experiments, pass a list of dicts with _id and experimentId properties. To import a file from an S3-compatible service, provide a Dict with keys \"host\" and \"path\" ; if the S3 object is private, additionally provide \"access_key\" and \"secret_key\" . None filename Optional [ str ] Rename the uploaded file. None add_file_number Optional [ bool ] If concatenating files, adds a file number channel to the resulting file. False add_event_number Optional [ bool ] Add an event number column to the exported file. This number corresponds to the index of the event in the original file; when concatenating files, the same event number will appear more than once. False pre_subsample_n Optional [ int ] Randomly subsample the file to contain this many events. None pre_subsample_p Optional [ float ] Randomly subsample the file to contain this percent of events (0 to 1). None seed Optional [ int ] Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. None Returns: Type Description FcsFile FcsFile","title":"create()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.create_from_dataframe","text":"Creates an FCS file from a DataFrame and uploads it CellEngine. Channel names ( $PnN values such as \"FITC-A\" or \"530/30-A\") are read from the DataFrame column names. Reagent names ( $PnS values such as \"CD3\") are optional and are read from the 2nd-level index of the DataFrame if present, or can be provided in a list in the same order as the channels via the reagents argument. Additional header keys can be provided via headers . In particular, it can be useful to set $PnD values, which CellEngine uses to set the initial display scaling: For linear scales, set \"$PnD\": \"Linear,<min>,<max>\" (e.g. \"Linear,-200,50000\" for a linear scale ranging from -200 to 50,000). For logarithmic scales, set \"$PnD\": \"Logarithmic,<decades>,<min>\" (e.g. \"Logarithmic,4,0.1\" for a logarithmic scale ranging from 0.1 to 1000). For arcsinh scales, leave \"$PnD\" unset. Aside from several heuristics, CellEngine will usually default to arcsinh with a max equal to the \"$PnR\" value. FCS files created with this method always use float32 encoding. For efficiency, consider using float32 arrays upstream when generating the FCS file values. Examples: With reagents specified in a multi-level index: df = pandas . DataFrame ( np . random . randn ( 6 , 3 ), columns = [[ \"Ax488-A\" , \"PE-A\" , \"Cluster ID\" ], [ \"CD3\" , \"CD4\" , None ]], dtype = \"float32\" ) FcsFile . create_from_dataframe ( experiment_id , \"myfile.fcs\" , df , headers = { \"P3D\" : \"Linear,0,20\" } ) With reagents specified in the reagents argument: df = pandas . DataFrame ( np . random . randn ( 6 , 3 ), columns = [ \"Ax488-A\" , \"PE-A\" , \"Cluster ID\" ], dtype = \"float32\" ) FcsFile . create_from_dataframe ( experiment_id , \"myfile.fcs\" , df , reagents = [ \"CD3\" , \"CD4\" , None ], headers = { \"P3D\" : \"Linear,0,20\" } ) Factorize categorical data into numbers for encoding as FCS: df = pandas . DataFrame ( [[ 1.0 , \"T cell\" , 1 ], [ 2.0 , \"T cell\" , 2 ], [ 3.0 , \"B cell\" , 3 ], [ 4.0 , \"T cell\" , 4 ]], columns = [ \"Ax488-A\" , \"Cell Type\" , \"Cluster ID\" ] ) df [ \"Cell Type\" ], cell_type_index = pandas . factorize ( df [ \"Cell Type\" ]) created = FcsFile . create_from_dataframe ( blank_experiment . _id , \"myfile.fcs\" , df , headers = { \"$P2D\" : \"Linear,0,10\" , \"$P3D\" : \"Linear,0,10\" } ) Returns: The created FCS file.","title":"create_from_dataframe()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.delete","text":"","title":"delete()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.get","text":"","title":"get()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.get_events","text":"Fetch a DataFrame containing this file's data. The returned DataFrame uses the channel names ( $PnN values) for column names because, unlike reagent names ( $PnS ), they are required and must be unique. To find the $PnN value for a given reagent name ( $PnS ), use fcs_file.channel_for_reagent(reagent) . Parameters: Name Type Description Default inplace Optional [ bool ] bool False **kwargs Any compensatedQ (bool): If True , applies the compensation specified in compensationId to the exported events. The numerical values will be unchanged, but the file header will contain the compensation as the spill string. compensationId ([int, str]): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If True , a header row containing the channel names will be included. original (bool): If True , the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. The Python toolkit uses the FlowIO library, which cannot parse as many FCS files as CellEngine can. Setting this parameter to True can cause parsing errors. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {} Returns: Name Type Description DataFrame Union [ DataFrame , None] This file's data, with query parameters applied. Union [ DataFrame , None] If inplace=True, it updates the self.events property. Union [ DataFrame , None] If destination is a string, saves file to the destination and returns None.","title":"get_events()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.get_file_internal_compensation","text":"Get the file-internal Compensation.","title":"get_file_internal_compensation()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.plot","text":"Build a plot for an FcsFile. See Plot.get() for more information.","title":"plot()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.update","text":"Save changes to this FcsFile to CellEngine.","title":"update()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.upload","text":"Uploads a file. The maximum file size is approximately 2.3 GB. Contact us if you need to work with larger files. Automatically parses panels and annotations and updates ScaleSets to include all channels in the file. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required filepath str The file contents. required","title":"upload()"},{"location":"folders/","text":"Folders CellEngine API: Folders Folder s are used to organize experiments and other folders in CellEngine. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.folder.Folder A class representing a CellEngine folder. created : datetime property creator : Dict [ str , Any ] property deleted : Union [ datetime , None ] property writable id : str property Alias for _id . name : str property writable path : List [ str ] property writable permissions : List [ Dict [ str , Any ]] property create ( name , path = []) staticmethod Create a folder. Parameters: Name Type Description Default name str Name of the folder required path str[] Optional path to create the folder in. Defaults to [] (root-level). [] Returns: Type Description Folder The newly created Folder. delete () Marks the folder as deleted. Deleted folders are permanently deleted after approximately 7 days. Until then, deleted folders can be recovered. get ( _id = None , name = None ) classmethod Get a Folder name or ID. Either name or _id must be specified. Parameters: Name Type Description Default _id optional ID of the folder. None name optional Name of the folder. None undelete () Clears a scheduled deletion. update () Save changes to this Folder to CellEngine.","title":"Folders"},{"location":"folders/#folders","text":"CellEngine API: Folders Folder s are used to organize experiments and other folders in CellEngine.","title":"Folders"},{"location":"folders/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"folders/#methods","text":"","title":"Methods"},{"location":"folders/#cellengine.resources.folder.Folder","text":"A class representing a CellEngine folder.","title":"Folder"},{"location":"folders/#cellengine.resources.folder.Folder.created","text":"","title":"created"},{"location":"folders/#cellengine.resources.folder.Folder.creator","text":"","title":"creator"},{"location":"folders/#cellengine.resources.folder.Folder.deleted","text":"","title":"deleted"},{"location":"folders/#cellengine.resources.folder.Folder.id","text":"Alias for _id .","title":"id"},{"location":"folders/#cellengine.resources.folder.Folder.name","text":"","title":"name"},{"location":"folders/#cellengine.resources.folder.Folder.path","text":"","title":"path"},{"location":"folders/#cellengine.resources.folder.Folder.permissions","text":"","title":"permissions"},{"location":"folders/#cellengine.resources.folder.Folder.create","text":"Create a folder. Parameters: Name Type Description Default name str Name of the folder required path str[] Optional path to create the folder in. Defaults to [] (root-level). [] Returns: Type Description Folder The newly created Folder.","title":"create()"},{"location":"folders/#cellengine.resources.folder.Folder.delete","text":"Marks the folder as deleted. Deleted folders are permanently deleted after approximately 7 days. Until then, deleted folders can be recovered.","title":"delete()"},{"location":"folders/#cellengine.resources.folder.Folder.get","text":"Get a Folder name or ID. Either name or _id must be specified. Parameters: Name Type Description Default _id optional ID of the folder. None name optional Name of the folder. None","title":"get()"},{"location":"folders/#cellengine.resources.folder.Folder.undelete","text":"Clears a scheduled deletion.","title":"undelete()"},{"location":"folders/#cellengine.resources.folder.Folder.update","text":"Save changes to this Folder to CellEngine.","title":"update()"},{"location":"gates/","text":"Gates CellEngine API: Gates Gates are geometric shapes that define boundaries within which events (cells) must be contained to be considered part of a population. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. All gate types share some required and optional arguments, which are documented on the base Gate class. Gate-specific arguments are documented in each gate type. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Gate ABC and Methods Although you should not instantiate the Gate class, each gate type will inherit the methods below. cellengine.resources.gate.Gate Do not construct directly; use the Experiment.create_*_gate and __Gate.create() methods. update () Save changes to this Gate to CellEngine. delete () Gate Types cellengine.resources.gate.RectangleGate Bases: SimpleGate create ( experiment_id , x_channel , y_channel , name , x1 , x2 , y1 , y2 , label = [], gid = None , locked = False , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True , parent_population_id = None ) classmethod Creates a rectangle gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. Must be specified when creating a tailored gate. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this population. None Returns: Type Description Union [ RectangleGate , Tuple [ RectangleGate , Population ]] A RectangleGate if create_population is False, or a Tuple with the gate and population if create_population is True. Examples: gate , pop = experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 , y1 = 1020 , y2 = 32021.2 ) cellengine.resources.gate.PolygonGate Bases: SimpleGate create ( experiment_id , x_channel , y_channel , name , vertices , label = [], gid = None , locked = False , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True , parent_population_id = None ) classmethod Creates a polygon gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required vertices List [ List [ float ]] List of coordinates, like [[x,y], [x,y], ...] . required label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this populations. None Returns: Type Description Union [ PolygonGate , Tuple [ PolygonGate , Population ]] A PolygonGate if create_population is False, or a Tuple with the gate and populations if create_population is True. Examples: gate , pop = experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , vertices = [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]]) cellengine.resources.gate.EllipseGate Bases: SimpleGate create ( experiment_id , x_channel , y_channel , name , center , angle , major , minor , label = [], gid = None , locked = False , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True , parent_population_id = None ) classmethod Creates an ellipse gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required center List [ float ] The x, y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this populations. None Returns: Type Description Union [ EllipseGate , Tuple [ EllipseGate , Population ]] If create_population is True , a tuple containing an EllipseGate and a list of two Populations; otherwise, an EllipseGate. Examples: gate , pop = experiment . create_ellipse_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) cellengine.resources.gate.RangeGate Bases: SimpleGate create ( experiment_id , x_channel , name , x1 , x2 , y = 0.5 , label = [], gid = None , locked = False , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True , parent_population_id = None ) classmethod Creates a range gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines 0.5 label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this populations. None Returns: Type Description Union [ RangeGate , Tuple [ RangeGate , Population ]] If create_population is True , a tuple containing a RangeGate and a list of two Populations; otherwise, a RangeGate. Examples: gate , pop = experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine.resources.gate.SplitGate Bases: CompoundGate create ( experiment_id , x_channel , name , x , y = 0.5 , labels = [], gid = None , gids = None , locked = False , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True , parent_population_id = None ) classmethod Creates a split gate. Split gates have two sectors (right and left), each with a unique gid and name. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required name str The name of the gate. required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The relative position from 0 to 1 of the horizontal dashed line extending from the center point. 0.5 labels List [ List [ float ]] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids Optional [ List [ str ]] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, corresponding populations will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create these populations. None Returns: Type Description Union [ SplitGate , Tuple [ SplitGate , List [ Population ]]] A SplitGate if create_population is False, or a Tuple with the gate and populations if create_population is True. Examples: # With automatic creation of the corresponding populations: gate , pops = experiment . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 0.5 , parent_population_id = \"...\" ) # Without gate = experiment . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 0.5 , create_population = False ) cellengine.resources.gate.QuadrantGate Bases: CompoundGate create ( experiment_id , x_channel , y_channel , name , x , y , labels = [], skewable = False , angles = [ 0 , pi / 2 , pi , 3 * pi / 2 ], gid = None , gids = None , locked = False , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True , parent_population_id = None ) classmethod Creates a quadrant gate. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List [ List [ float ]] Positions of the quadrant labels. A list of four length-2 vectors in the order UR, UL, LL, LR. These are set automatically to the plot corners. [] skewable bool Whether the quadrant gate is skewable. False angles List [ float ] List of the four angles of the quadrant demarcations [0, pi / 2, pi , 3 * pi / 2] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids Optional [ List [ str ]] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, corresponding populations will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create these populations. None Returns: Type Description Union [ QuadrantGate , Tuple [ QuadrantGate , List [ Population ]]] If create_population is True , a tuple containing the QuadrantGate and a list of four Populations; otherwise, a QuadrantGate. Examples: gate , pops = experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) Gate Models Gates have a model property, which is a nested dict object. For convenience, the model property has dot-indexing for getting and setting properties. For instance: > gate = experiment . gates [ 0 ] > gate . model Munch ({ 'polygon' : Munch ({ 'vertices' : [ [ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ] ]}), 'locked' : False , 'label' : [ 7.62844 , 6.19701 ] }) > gate . model . polygon . vertices [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]] You can set the values of these properties. You must explicitly call the update method for these changes to be saved to CellEngine. > gate . model . locked True > gate . model . locked = False > gate . update () > gate . model . locked False You may set invalid values, but update will fail with an API error: > gate . model . locked = \"orange\" > gate . model . locked \"orange\" > gate . update () APIError : CellEngine API : status code 400 != 200 for URL https : // cellengine . com / api / v1 / experiments /.../ gates /... -- \"locked\" must be a Boolean . Creating Gates Gates may be created singly or in bulk. Create a single new gate using kwargs: # using a method on Experiment exp . create_ellipse_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) # using a classmethod from cellengine import EllipseGate gate = EllipseGate . create ( experiment_id = exp . _id , # the same kwargs ) gate . post () Post gates in bulk When creating many gates, build the gates in a list, then save them in bulk to CellEngine. For instance: gates = [] gates . append ( EllipseGate . create ( experiment_id = exp . _id , # args, kwargs ) ) gates . append ( RectangleGate . create ( experiment_id = exp . _id , # args, kwargs ) ) Gate . bulk_create ( gates ) # returns [EllipseGate(...), RectangleGate(...)]","title":"Gates"},{"location":"gates/#gates","text":"CellEngine API: Gates Gates are geometric shapes that define boundaries within which events (cells) must be contained to be considered part of a population. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. All gate types share some required and optional arguments, which are documented on the base Gate class. Gate-specific arguments are documented in each gate type.","title":"Gates"},{"location":"gates/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"gates/#gate-abc-and-methods","text":"Although you should not instantiate the Gate class, each gate type will inherit the methods below.","title":"Gate ABC and Methods"},{"location":"gates/#cellengine.resources.gate.Gate","text":"Do not construct directly; use the Experiment.create_*_gate and __Gate.create() methods.","title":"Gate"},{"location":"gates/#cellengine.resources.gate.Gate.update","text":"Save changes to this Gate to CellEngine.","title":"update()"},{"location":"gates/#cellengine.resources.gate.Gate.delete","text":"","title":"delete()"},{"location":"gates/#gate-types","text":"","title":"Gate Types"},{"location":"gates/#cellengine.resources.gate.RectangleGate","text":"Bases: SimpleGate","title":"RectangleGate"},{"location":"gates/#cellengine.resources.gate.RectangleGate.create","text":"Creates a rectangle gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. Must be specified when creating a tailored gate. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this population. None Returns: Type Description Union [ RectangleGate , Tuple [ RectangleGate , Population ]] A RectangleGate if create_population is False, or a Tuple with the gate and population if create_population is True. Examples: gate , pop = experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 , y1 = 1020 , y2 = 32021.2 )","title":"create()"},{"location":"gates/#cellengine.resources.gate.PolygonGate","text":"Bases: SimpleGate","title":"PolygonGate"},{"location":"gates/#cellengine.resources.gate.PolygonGate.create","text":"Creates a polygon gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required vertices List [ List [ float ]] List of coordinates, like [[x,y], [x,y], ...] . required label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this populations. None Returns: Type Description Union [ PolygonGate , Tuple [ PolygonGate , Population ]] A PolygonGate if create_population is False, or a Tuple with the gate and populations if create_population is True. Examples: gate , pop = experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , vertices = [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]])","title":"create()"},{"location":"gates/#cellengine.resources.gate.EllipseGate","text":"Bases: SimpleGate","title":"EllipseGate"},{"location":"gates/#cellengine.resources.gate.EllipseGate.create","text":"Creates an ellipse gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required center List [ float ] The x, y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this populations. None Returns: Type Description Union [ EllipseGate , Tuple [ EllipseGate , Population ]] If create_population is True , a tuple containing an EllipseGate and a list of two Populations; otherwise, an EllipseGate. Examples: gate , pop = experiment . create_ellipse_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 )","title":"create()"},{"location":"gates/#cellengine.resources.gate.RangeGate","text":"Bases: SimpleGate","title":"RangeGate"},{"location":"gates/#cellengine.resources.gate.RangeGate.create","text":"Creates a range gate. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines 0.5 label List [ float ] Position of the label. Defaults to the midpoint of the gate. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, a corresponding population will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create this populations. None Returns: Type Description Union [ RangeGate , Tuple [ RangeGate , Population ]] If create_population is True , a tuple containing a RangeGate and a list of two Populations; otherwise, a RangeGate. Examples: gate , pop = experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 )","title":"create()"},{"location":"gates/#cellengine.resources.gate.SplitGate","text":"Bases: CompoundGate","title":"SplitGate"},{"location":"gates/#cellengine.resources.gate.SplitGate.create","text":"Creates a split gate. Split gates have two sectors (right and left), each with a unique gid and name. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required name str The name of the gate. required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The relative position from 0 to 1 of the horizontal dashed line extending from the center point. 0.5 labels List [ List [ float ]] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids Optional [ List [ str ]] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, corresponding populations will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create these populations. None Returns: Type Description Union [ SplitGate , Tuple [ SplitGate , List [ Population ]]] A SplitGate if create_population is False, or a Tuple with the gate and populations if create_population is True. Examples: # With automatic creation of the corresponding populations: gate , pops = experiment . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 0.5 , parent_population_id = \"...\" ) # Without gate = experiment . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 0.5 , create_population = False )","title":"create()"},{"location":"gates/#cellengine.resources.gate.QuadrantGate","text":"Bases: CompoundGate","title":"QuadrantGate"},{"location":"gates/#cellengine.resources.gate.QuadrantGate.create","text":"Creates a quadrant gate. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Parameters: Name Type Description Default experiment_id str The ID of the experiment. required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List [ List [ float ]] Positions of the quadrant labels. A list of four length-2 vectors in the order UR, UL, LL, LR. These are set automatically to the plot corners. [] skewable bool Whether the quadrant gate is skewable. False angles List [ float ] List of the four angles of the quadrant demarcations [0, pi / 2, pi , 3 * pi / 2] gid Optional [ str ] Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids Optional [ List [ str ]] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id Optional [ str ] ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file Optional [ str ] Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool If true, corresponding populations will be created and returned in a tuple with the gate. True parent_population_id Optional [ str ] Use with create_population to specify the population below which to create these populations. None Returns: Type Description Union [ QuadrantGate , Tuple [ QuadrantGate , List [ Population ]]] If create_population is True , a tuple containing the QuadrantGate and a list of four Populations; otherwise, a QuadrantGate. Examples: gate , pops = experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 )","title":"create()"},{"location":"gates/#gate-models","text":"Gates have a model property, which is a nested dict object. For convenience, the model property has dot-indexing for getting and setting properties. For instance: > gate = experiment . gates [ 0 ] > gate . model Munch ({ 'polygon' : Munch ({ 'vertices' : [ [ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ] ]}), 'locked' : False , 'label' : [ 7.62844 , 6.19701 ] }) > gate . model . polygon . vertices [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]] You can set the values of these properties. You must explicitly call the update method for these changes to be saved to CellEngine. > gate . model . locked True > gate . model . locked = False > gate . update () > gate . model . locked False You may set invalid values, but update will fail with an API error: > gate . model . locked = \"orange\" > gate . model . locked \"orange\" > gate . update () APIError : CellEngine API : status code 400 != 200 for URL https : // cellengine . com / api / v1 / experiments /.../ gates /... -- \"locked\" must be a Boolean .","title":"Gate Models"},{"location":"gates/#creating-gates","text":"Gates may be created singly or in bulk.","title":"Creating Gates"},{"location":"gates/#create-a-single-new-gate-using-kwargs","text":"# using a method on Experiment exp . create_ellipse_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) # using a classmethod from cellengine import EllipseGate gate = EllipseGate . create ( experiment_id = exp . _id , # the same kwargs ) gate . post ()","title":"Create a single new gate using kwargs:"},{"location":"gates/#post-gates-in-bulk","text":"When creating many gates, build the gates in a list, then save them in bulk to CellEngine. For instance: gates = [] gates . append ( EllipseGate . create ( experiment_id = exp . _id , # args, kwargs ) ) gates . append ( RectangleGate . create ( experiment_id = exp . _id , # args, kwargs ) ) Gate . bulk_create ( gates ) # returns [EllipseGate(...), RectangleGate(...)]","title":"Post gates in bulk"},{"location":"plots/","text":"Plots CellEngine API: Plots A Plot is an image representing of cytometry data. Properties The Python SDK Plot only has display , get , and save methods. In the case of Plot , properties refers to an optional dictionary of configuration arguments to pass to the get method. Options are detailed above. Methods cellengine.resources.plot.Plot dataclass A class representing a CellEngine plot. display () get ( experiment_id , fcs_file_id , plot_type , x_channel , y_channel , z_channel = None , population_id = None , compensation = 0 , ** kwargs ) classmethod Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs. required fcs_file_id str ID of file for which to build a plot. required plot_type str \"contour\", \"dot\", \"density\" or \"histogram\" (case-insensitive) required x_channel str X channel name. required y_channel str (for 2D plots) Y channel name. required z_channel Optional [ str ] (for dot plots colored by a 3rd channel) Color channel name. None population_id Optional [ str ] Defaults to ungated. None compensation string ID, 0 or -1 Compensation to use for gating and display. Defaults to uncompensated (0). 0 **kwargs Dict axesQ (bool): Display axes lines. Defaults to true. axisLabelsQ (bool): Display axis labels. Defaults to true. color (str): Case-insensitive string in the format #rgb, #rgba, #rrggbb or #rrggbbaa. The foreground color, i.e. color of curve in \"histogram\" plots and dots in \"dot\" plots. gateLabel (str): One of \"eventcount\", \"mean\", \"median\", \"percent\", \"mad\", \"cv\", \"stddev\", \"geometricmean\", \"name\", \"none\". gateLabelFontSize (float): Font size for gate labels. height (int): Image height. Defaults to 228. percentileStart (float): For contour plots, the percentile of the first contour. percentileStep (float): For contour plots, the percentile step between each contour. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. renderGates (bool): Render gates into the image. seed (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. smoothing (float): For density and contour plots, adjusts the amount of smoothing. Defaults to 0 (no smoothing). Set to 1 for typical smoothing. Higher values (up to 10) increase smoothing. strokeThickness (float): The thickness of histogram and contour plot lines. Defaults to 1. tickLabelsQ (bool): Display tick labels. Defaults to false. ticksQ (bool): Display ticks. Defaults to true. width (int): Image width. Defaults to 228. xAxisLabelQ (bool): Display x axis label. Overrides axisLabelsQ. xAxisQ (bool): Display x axis line. Overrides axesQ. xTickLabelsQ (bool): Display x tick labels. overrides tickLabelsQ. xTicksQ (bool): Display x ticks. Overrides ticksQ. yAxisLabelQ (bool): Display y axis label. Overrides axisLabelsQ. yAxisQ (bool): Display y axis line. Overrides axesQ. yTickLabelsQ (bool): Display y tick labels. Overrides tickLabelsQ. yTicksQ (bool): Display y ticks. Overrides ticksQ. {} save ( filepath )","title":"Plots"},{"location":"plots/#plots","text":"CellEngine API: Plots A Plot is an image representing of cytometry data.","title":"Plots"},{"location":"plots/#properties","text":"The Python SDK Plot only has display , get , and save methods. In the case of Plot , properties refers to an optional dictionary of configuration arguments to pass to the get method. Options are detailed above.","title":"Properties"},{"location":"plots/#methods","text":"","title":"Methods"},{"location":"plots/#cellengine.resources.plot.Plot","text":"A class representing a CellEngine plot.","title":"Plot"},{"location":"plots/#cellengine.resources.plot.Plot.display","text":"","title":"display()"},{"location":"plots/#cellengine.resources.plot.Plot.get","text":"Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs. required fcs_file_id str ID of file for which to build a plot. required plot_type str \"contour\", \"dot\", \"density\" or \"histogram\" (case-insensitive) required x_channel str X channel name. required y_channel str (for 2D plots) Y channel name. required z_channel Optional [ str ] (for dot plots colored by a 3rd channel) Color channel name. None population_id Optional [ str ] Defaults to ungated. None compensation string ID, 0 or -1 Compensation to use for gating and display. Defaults to uncompensated (0). 0 **kwargs Dict axesQ (bool): Display axes lines. Defaults to true. axisLabelsQ (bool): Display axis labels. Defaults to true. color (str): Case-insensitive string in the format #rgb, #rgba, #rrggbb or #rrggbbaa. The foreground color, i.e. color of curve in \"histogram\" plots and dots in \"dot\" plots. gateLabel (str): One of \"eventcount\", \"mean\", \"median\", \"percent\", \"mad\", \"cv\", \"stddev\", \"geometricmean\", \"name\", \"none\". gateLabelFontSize (float): Font size for gate labels. height (int): Image height. Defaults to 228. percentileStart (float): For contour plots, the percentile of the first contour. percentileStep (float): For contour plots, the percentile step between each contour. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. renderGates (bool): Render gates into the image. seed (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. smoothing (float): For density and contour plots, adjusts the amount of smoothing. Defaults to 0 (no smoothing). Set to 1 for typical smoothing. Higher values (up to 10) increase smoothing. strokeThickness (float): The thickness of histogram and contour plot lines. Defaults to 1. tickLabelsQ (bool): Display tick labels. Defaults to false. ticksQ (bool): Display ticks. Defaults to true. width (int): Image width. Defaults to 228. xAxisLabelQ (bool): Display x axis label. Overrides axisLabelsQ. xAxisQ (bool): Display x axis line. Overrides axesQ. xTickLabelsQ (bool): Display x tick labels. overrides tickLabelsQ. xTicksQ (bool): Display x ticks. Overrides ticksQ. yAxisLabelQ (bool): Display y axis label. Overrides axisLabelsQ. yAxisQ (bool): Display y axis line. Overrides axesQ. yTickLabelsQ (bool): Display y tick labels. Overrides tickLabelsQ. yTicksQ (bool): Display y ticks. Overrides ticksQ. {}","title":"get()"},{"location":"plots/#cellengine.resources.plot.Plot.save","text":"","title":"save()"},{"location":"populations/","text":"Populations CellEngine API: Populations A Population is a collection of gates. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.population.Population experiment_id : str property gates : str property writable id : str property Alias for _id . name : str property writable parent_id : Union [ str , None ] property writable terminal_gate_gid : Union [ str , None ] property writable unique_name : str property The unique name for this population (has ancestor names prepended and numerical suffixes appended until the name is unique). This value is calculated by CellEngine; if the population is renamed, this value will not be correct until pop.update() is called. delete () get ( experiment_id , _id = None , name = None ) classmethod Get Population by name or ID for a specific experiment. Either name or _id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id optional ID of the attachment. None name optional Name of the experiment. None update () Save changes to this Population to CellEngine.","title":"Populations"},{"location":"populations/#populations","text":"CellEngine API: Populations A Population is a collection of gates.","title":"Populations"},{"location":"populations/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"populations/#methods","text":"","title":"Methods"},{"location":"populations/#cellengine.resources.population.Population","text":"","title":"Population"},{"location":"populations/#cellengine.resources.population.Population.experiment_id","text":"","title":"experiment_id"},{"location":"populations/#cellengine.resources.population.Population.gates","text":"","title":"gates"},{"location":"populations/#cellengine.resources.population.Population.id","text":"Alias for _id .","title":"id"},{"location":"populations/#cellengine.resources.population.Population.name","text":"","title":"name"},{"location":"populations/#cellengine.resources.population.Population.parent_id","text":"","title":"parent_id"},{"location":"populations/#cellengine.resources.population.Population.terminal_gate_gid","text":"","title":"terminal_gate_gid"},{"location":"populations/#cellengine.resources.population.Population.unique_name","text":"The unique name for this population (has ancestor names prepended and numerical suffixes appended until the name is unique). This value is calculated by CellEngine; if the population is renamed, this value will not be correct until pop.update() is called.","title":"unique_name"},{"location":"populations/#cellengine.resources.population.Population.delete","text":"","title":"delete()"},{"location":"populations/#cellengine.resources.population.Population.get","text":"Get Population by name or ID for a specific experiment. Either name or _id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id optional ID of the attachment. None name optional Name of the experiment. None","title":"get()"},{"location":"populations/#cellengine.resources.population.Population.update","text":"Save changes to this Population to CellEngine.","title":"update()"},{"location":"recipes/","text":"Recipes for common operations from cellengine.utils.api_client.APIClient import APIClient client = cellengine . APIClient ( \"username\" , \"password\" ) e = client . get_experiment ( name = \"my experiment\" ) fcsfile = e . get_fcs_file ( experiment_id = e . _id , name = \"my fcs file\" ) p = e . get_population ( name = \"my population name\" )","title":"Cookbook"},{"location":"recipes/#recipes-for-common-operations","text":"from cellengine.utils.api_client.APIClient import APIClient client = cellengine . APIClient ( \"username\" , \"password\" ) e = client . get_experiment ( name = \"my experiment\" ) fcsfile = e . get_fcs_file ( experiment_id = e . _id , name = \"my fcs file\" ) p = e . get_population ( name = \"my population name\" )","title":"Recipes for common operations"},{"location":"scalesets/","text":"ScaleSets CellEngine API: ScaleSets A scale set is a set of scales (one scale per channel name for all channels in the experiment). Each experiment has exactly one scale set. Uploading a file updates the experiment's scale set to ensure that the new file's channels are included. If a new channel must be added to a ScaleSet, the default scale from the FCS file will be used. It is possible to add or update scales to the scale set. Scales are a dict of dicts, and may be manipulated as expected: scaleset . scales [ \"Channel-1\" ] . update ({ \"maximum\" : 10 }) # or scaleset . scales [ \"Channel-2\" ][ \"maximum\" ] = 10 scaleset . scales [ \"Channel-3\" ][ \"type\" ] = \"ArcSinhScale\" Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.scaleset.ScaleSet experiment_id : str property id : str property Alias for _id . name : str property scales : Dict [ str , ScaleDict ] property apply ( file , clamp_q = False , in_place = True ) Apply the scaleset to a file. Parameters: Name Type Description Default file FcsFile The file to which this scaleset will be applied. See FcsFile.events : the scaleset will be applied to the last result from FcsFile.get_events will be used if the file's events have already been retrieved. required clamp_q bool Clamp the output to the scale's minimum and maximum values. False in_place bool If True, updates FcsFile.events in-place; if False, returns a DataFrame. True get ( experiment_id ) classmethod scale_fn_for_channel ( channel ) Get the scale function for a channel. Parameters: Name Type Description Default channel str The channel name. required Returns: Type Description Callable [[ float ], float ] The scale function for the channel. scale_for_channel ( channel ) Get the scale for a channel. Parameters: Name Type Description Default channel str The channel name. required Returns: Type Description Optional [ ScaleDict ] The scale for the channel, or None if the channel is not in the Optional [ ScaleDict ] scaleset. update () Save changes to this ScaleSet to CellEngine. Warning: This API endpoint can change gates if their coordinates are affected by the scale parameters. You may need to re-query gates to synchronize your local state with CellEngine.","title":"ScaleSets"},{"location":"scalesets/#scalesets","text":"CellEngine API: ScaleSets A scale set is a set of scales (one scale per channel name for all channels in the experiment). Each experiment has exactly one scale set. Uploading a file updates the experiment's scale set to ensure that the new file's channels are included. If a new channel must be added to a ScaleSet, the default scale from the FCS file will be used. It is possible to add or update scales to the scale set. Scales are a dict of dicts, and may be manipulated as expected: scaleset . scales [ \"Channel-1\" ] . update ({ \"maximum\" : 10 }) # or scaleset . scales [ \"Channel-2\" ][ \"maximum\" ] = 10 scaleset . scales [ \"Channel-3\" ][ \"type\" ] = \"ArcSinhScale\"","title":"ScaleSets"},{"location":"scalesets/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"scalesets/#methods","text":"","title":"Methods"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet","text":"","title":"ScaleSet"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.experiment_id","text":"","title":"experiment_id"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.id","text":"Alias for _id .","title":"id"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.name","text":"","title":"name"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.scales","text":"","title":"scales"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.apply","text":"Apply the scaleset to a file. Parameters: Name Type Description Default file FcsFile The file to which this scaleset will be applied. See FcsFile.events : the scaleset will be applied to the last result from FcsFile.get_events will be used if the file's events have already been retrieved. required clamp_q bool Clamp the output to the scale's minimum and maximum values. False in_place bool If True, updates FcsFile.events in-place; if False, returns a DataFrame. True","title":"apply()"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.get","text":"","title":"get()"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.scale_fn_for_channel","text":"Get the scale function for a channel. Parameters: Name Type Description Default channel str The channel name. required Returns: Type Description Callable [[ float ], float ] The scale function for the channel.","title":"scale_fn_for_channel()"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.scale_for_channel","text":"Get the scale for a channel. Parameters: Name Type Description Default channel str The channel name. required Returns: Type Description Optional [ ScaleDict ] The scale for the channel, or None if the channel is not in the Optional [ ScaleDict ] scaleset.","title":"scale_for_channel()"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.update","text":"Save changes to this ScaleSet to CellEngine. Warning: This API endpoint can change gates if their coordinates are affected by the scale parameters. You may need to re-query gates to synchronize your local state with CellEngine.","title":"update()"}]}