{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CellEngine API Toolkit for Python For full API documentation visit CellEngine . Quickstart Install cellengine-python-toolkit using pip : $ pip install cellengine-python-toolkit For the development version: $ pip install git+https://github.com/primitybio/cellengine-python-toolkit.git import cellengine client = cellengine . APIClient ( username = \"jason\" ) # password will be prompted experiment = client . get_experiment ( name = \"My experiment\" ) Resources GitHub CellEngine API","title":"Home"},{"location":"#cellengine-api-toolkit-for-python","text":"For full API documentation visit CellEngine .","title":"CellEngine API Toolkit for Python"},{"location":"#quickstart","text":"Install cellengine-python-toolkit using pip : $ pip install cellengine-python-toolkit For the development version: $ pip install git+https://github.com/primitybio/cellengine-python-toolkit.git import cellengine client = cellengine . APIClient ( username = \"jason\" ) # password will be prompted experiment = client . get_experiment ( name = \"My experiment\" )","title":"Quickstart"},{"location":"#resources","text":"GitHub CellEngine API","title":"Resources"},{"location":"api_client/","text":"API Client CellEngine API The CellEngine APIClient object is the interface between the CellEngine API and entities in the Python SDK. You can authenticate easily with the APIClient . Thereafter, you may either use the APIClient directly, or you may operate on the SDK entities. For instance, the following sequences of commands are equivalent: import cellengine client = cellengine . APIClient ( \"username\" , \"password\" ) exp = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcsfile ( experiment_id = exp . _id , name = \"my fcs file\" ) import cellengine client = cellengine . APIClient ( \"username\" , \"password\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = cellengine . FcsFile . get ( experiment_id = exp . _id , name = \"my fcs file\" ) import cellengine client = cellengine . APIClient ( \"username\" , \"password\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = exp . get_fcs_file ( name = \"my fcs file\" ) The APIClient provides many useful methods for interacting with CellEngine. It also provides _get , _post , _patch , and _delete methods for batteries-not-included interaction with the CellEngine API . If there is a feature you do not see, please feel free to [make a pull request][contributing] or create an Issue on GitHub . Methods cellengine.utils.api_client.APIClient.APIClient API_NAME clone_experiment ( self , _id , name = None , as_dict = False ) create_fcs_file ( self , experiment_id , body ) delete_entity ( self , experiment_id , entity_type , _id ) delete_gate ( self , experiment_id , _id ) get_attachment ( self , experiment_id , _id = None , name = None , as_dict = False ) get_attachments ( self , experiment_id , as_dict = False ) get_compensation ( self , experiment_id , _id = None , name = None , as_dict = False ) get_compensations ( self , experiment_id , as_dict = False ) get_experiment ( self , _id = None , name = None , as_dict = False ) get_experiments ( self , as_dict = False ) get_fcs_file ( self , experiment_id , _id = None , name = None , as_dict = False ) get_fcs_file_events ( self , experiment_id , fcs_file_id ) get_fcs_files ( self , experiment_id , as_dict = False ) get_gate ( self , experiment_id , _id , as_dict = False ) Gates cannot be retrieved by name. get_gates ( self , experiment_id , as_dict = False ) get_plot ( self , experiment_id , fcs_file_id , x_channel , y_channel , plot_type , population_id = None , properties = None , as_dict = False ) get_population ( self , experiment_id , _id = None , name = None , as_dict = False ) get_populations ( self , experiment_id , as_dict = False ) get_scalesets ( self , experiment_id , as_dict = True ) Get scalesets for an experiment. TODO: for now, this always returns the raw data get_statistics ( self , experiment_id , statistics , channels , q = None , annotations = False , compensation_id = None , fcs_file_ids = None , format = 'json' , layout = None , percent_of = None , population_ids = None ) Request Statistics from CellEngine. Parameters: Name Type Description Default experiment_id str ID of experiment to request statistics for. required statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations Optional[bool] bool: Include file annotations in output (defaults to False). False compensation_id Optional[str] str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids Optional[List[str]] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format Optional[str] str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional[str] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional[Union[str, List[str]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. None population_ids Optional[List[str]] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe post_attachment ( self , experiment_id , files ) post_compensation ( self , experiment_id , compensation = None , as_dict = False ) post_experiment ( self , experiment , as_dict = False ) post_gate ( self , experiment_id , gate , create_population = True , as_dict = False ) post_population ( self , experiment_id , population , as_dict = False ) update_entity ( self , experiment_id , _id , entity_type , body ) update_experiment ( self , _id , body ) upload_fcs_file ( self , experiment_id , file ) Properties endpoint_base user_name password token user_id admin flags authenticated cache_info cache_clear","title":"API Client"},{"location":"api_client/#api-client","text":"CellEngine API The CellEngine APIClient object is the interface between the CellEngine API and entities in the Python SDK. You can authenticate easily with the APIClient . Thereafter, you may either use the APIClient directly, or you may operate on the SDK entities. For instance, the following sequences of commands are equivalent: import cellengine client = cellengine . APIClient ( \"username\" , \"password\" ) exp = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcsfile ( experiment_id = exp . _id , name = \"my fcs file\" ) import cellengine client = cellengine . APIClient ( \"username\" , \"password\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = cellengine . FcsFile . get ( experiment_id = exp . _id , name = \"my fcs file\" ) import cellengine client = cellengine . APIClient ( \"username\" , \"password\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = exp . get_fcs_file ( name = \"my fcs file\" ) The APIClient provides many useful methods for interacting with CellEngine. It also provides _get , _post , _patch , and _delete methods for batteries-not-included interaction with the CellEngine API . If there is a feature you do not see, please feel free to [make a pull request][contributing] or create an Issue on GitHub .","title":"API Client"},{"location":"api_client/#methods","text":"","title":"Methods"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient","text":"","title":"APIClient"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.API_NAME","text":"","title":"API_NAME"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.clone_experiment","text":"","title":"clone_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.create_fcs_file","text":"","title":"create_fcs_file()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.delete_entity","text":"","title":"delete_entity()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.delete_gate","text":"","title":"delete_gate()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_attachment","text":"","title":"get_attachment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_attachments","text":"","title":"get_attachments()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_compensation","text":"","title":"get_compensation()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_compensations","text":"","title":"get_compensations()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_experiment","text":"","title":"get_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_experiments","text":"","title":"get_experiments()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_fcs_file","text":"","title":"get_fcs_file()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_fcs_file_events","text":"","title":"get_fcs_file_events()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_fcs_files","text":"","title":"get_fcs_files()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_gate","text":"Gates cannot be retrieved by name.","title":"get_gate()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_gates","text":"","title":"get_gates()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_plot","text":"","title":"get_plot()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_population","text":"","title":"get_population()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_populations","text":"","title":"get_populations()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_scalesets","text":"Get scalesets for an experiment. TODO: for now, this always returns the raw data","title":"get_scalesets()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_statistics","text":"Request Statistics from CellEngine. Parameters: Name Type Description Default experiment_id str ID of experiment to request statistics for. required statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations Optional[bool] bool: Include file annotations in output (defaults to False). False compensation_id Optional[str] str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids Optional[List[str]] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format Optional[str] str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional[str] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional[Union[str, List[str]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. None population_ids Optional[List[str]] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe","title":"get_statistics()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_attachment","text":"","title":"post_attachment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_compensation","text":"","title":"post_compensation()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_experiment","text":"","title":"post_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_gate","text":"","title":"post_gate()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_population","text":"","title":"post_population()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.update_entity","text":"","title":"update_entity()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.update_experiment","text":"","title":"update_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.upload_fcs_file","text":"","title":"upload_fcs_file()"},{"location":"api_client/#properties","text":"endpoint_base user_name password token user_id admin flags authenticated cache_info cache_clear","title":"Properties"},{"location":"attachments/","text":"Attachments CellEngine API: Attachments Attachments are non-data files stored on an experiment For accessible properties, see Properties . Methods are available for common access and transformations on the Attachment. Methods cellengine.resources.attachment.Attachment A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment. create ( experiment_id , filepath ) classmethod delete ( self ) Delete this attachment. download ( self , to_file = None ) Download the attachment. Defaults to returning the file. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Filepath at which to save the file. Accepts relative or absolute path. None Returns: Type Description content JSON-serializable if possible, otherwise the raw response content. get ( experiment_id , _id = None , name = None ) classmethod Get an Attachment by name or ID for a specific experiment. Either name or id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id str ID of the attachment. None name str Name of the experiment. None update ( self , inplace = True ) Save changes to this Attachment to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description None Updates the Attachment on CellEngine and then synchronizes the properties with the current Attachment object. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Attachments"},{"location":"attachments/#attachments","text":"CellEngine API: Attachments Attachments are non-data files stored on an experiment For accessible properties, see Properties . Methods are available for common access and transformations on the Attachment.","title":"Attachments"},{"location":"attachments/#methods","text":"","title":"Methods"},{"location":"attachments/#cellengine.resources.attachment.Attachment","text":"A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment.","title":"Attachment"},{"location":"attachments/#cellengine.resources.attachment.Attachment.create","text":"","title":"create()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.delete","text":"Delete this attachment.","title":"delete()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.download","text":"Download the attachment. Defaults to returning the file. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Filepath at which to save the file. Accepts relative or absolute path. None Returns: Type Description content JSON-serializable if possible, otherwise the raw response content.","title":"download()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.get","text":"Get an Attachment by name or ID for a specific experiment. Either name or id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id str ID of the attachment. None name str Name of the experiment. None","title":"get()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.update","text":"Save changes to this Attachment to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description None Updates the Attachment on CellEngine and then synchronizes the properties with the current Attachment object.","title":"update()"},{"location":"attachments/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"compensations/","text":"Compensations CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\"/\"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame. For accessible properties, see Properties . Methods are available for common access and transformations on the Compensation. Methods cellengine.resources.compensation.Compensation A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them. create ( experiment_id , compensation ) classmethod delete ( self ) get ( experiment_id , _id = None , name = None ) classmethod update ( self , inplace = True ) Save changes to this Compensation to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description Experiment or None If inplace is True, returns a new Compensation. Otherwise, updates the current entity. A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them. dataframe property readonly Get the compensation matrix as a Pandas DataFrame. apply ( self , file , inplace = True ) Compensates the file's data. Parameters: Name Type Description Default file FcsFile The FCS file to compensate. required inplace bool Compensate the file's data in-place. True Returns: Type Description DataFrame or None if inplace=True , returns nothing. dataframe_as_html ( self ) Return the compensation matrix dataframe as HTML. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Compensations"},{"location":"compensations/#compensations","text":"CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\"/\"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame. For accessible properties, see Properties . Methods are available for common access and transformations on the Compensation.","title":"Compensations"},{"location":"compensations/#methods","text":"","title":"Methods"},{"location":"compensations/#cellengine.resources.compensation.Compensation","text":"A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them.","title":"Compensation"},{"location":"compensations/#cellengine.resources.compensation.Compensation.create","text":"","title":"create()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.delete","text":"","title":"delete()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.get","text":"","title":"get()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.update","text":"Save changes to this Compensation to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description Experiment or None If inplace is True, returns a new Compensation. Otherwise, updates the current entity.","title":"update()"},{"location":"compensations/#cellengine.payloads.compensation._Compensation","text":"A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them.","title":"cellengine.payloads.compensation._Compensation"},{"location":"compensations/#cellengine.payloads.compensation._Compensation.dataframe","text":"Get the compensation matrix as a Pandas DataFrame.","title":"dataframe"},{"location":"compensations/#cellengine.payloads.compensation._Compensation.apply","text":"Compensates the file's data. Parameters: Name Type Description Default file FcsFile The FCS file to compensate. required inplace bool Compensate the file's data in-place. True Returns: Type Description DataFrame or None if inplace=True , returns nothing.","title":"apply()"},{"location":"compensations/#cellengine.payloads.compensation._Compensation.dataframe_as_html","text":"Return the compensation matrix dataframe as HTML.","title":"dataframe_as_html()"},{"location":"compensations/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"contributing/","text":"Contributing","title":"Development"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"experiments/","text":"Experiments CellEngine API: Experiments An Experiment is largely a wrapper around the CellEngine Experiment, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment . Most methods available from the APIClient are available on an Experiment , with the first param experiment_id implicitly passed as the current experiment's ID. Methods cellengine.resources.experiment.Experiment active_compensation attachments: List [ cellengine . resources . attachment . Attachment ] property readonly List all attachments on the experiment. compensations: List [ cellengine . resources . compensation . Compensation ] property readonly List all compensations on the experiment. delete property readonly Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered. fcs_files: List [ cellengine . resources . fcs_file . FcsFile ] property readonly List all files on the experiment. gates: List [ cellengine . resources . gate . Gate ] property readonly List all gates on the experiment. populations: List [ cellengine . resources . population . Population ] property readonly List all populations in the experiment. undelete property readonly Remove a scheduled deletion. clone ( self , name = None ) Saves a deep copy of the experiment and all of its resources, including attachments, FCS files, gates and populations. Parameters: Name Type Description Default name The name to give the new experiment. Defaults to \"[Original Experiment]-1\" None as_dict Optionally return the new experiment as a dict. required Returns: Type Description A deep copy of the experiment. create ( name = None , comments = None , uploader = None , primary_researcher = None , public = False , tags = None , as_dict = False ) classmethod Post a new experiment to CellEngine. Parameters: Name Type Description Default name str Defaults to \"Untitled Experiment\". None comments str Defaults to None. None uploader str Defaults to user making request. None primary_researcher str Defaults to user making request. None public bool Defaults to false. False tags List[str] Defaults to empty list. None as_dict Whether to return the experiment as an Experiment object or a dict. False Returns: Type Description Experiment Creates the Experiment on CellEngine and returns it. create_complex_population ( self , name , base_gate , gates = None ) Create a complex population Parameters: Name Type Description Default name str Name of the population to create. required base_gate str ID of the gate to build a complex population from. required gates str IDs of other gates to include in the complex population. None Returns: Type Description Population A created complex population. create_ellipse_gate ( self , * args , ** kwargs ) create_polygon_gate ( self , * args , ** kwargs ) create_quadrant_gate ( self , * args , ** kwargs ) create_range_gate ( self , * args , ** kwargs ) create_rectangle_gate ( self , * args , ** kwargs ) create_split_gate ( self , * args , ** kwargs ) delete_gates ( self , experiment_id , _id = None , gid = None , exclude = None ) get ( _id = None , name = None ) classmethod get_attachment ( self , _id = None , name = None ) Get a specific attachment. get_compensation ( self , _id = None , name = None ) Get a specific compensation. get_fcs_file ( self , _id = None , name = None ) Get a specific fcs_file. get_gate ( self , _id = None , name = None ) Get a specific gate. get_population ( self , _id = None , name = None ) Get a specific population. get_statistics ( self , statistics , channels , q = None , annotations = False , compensation_id = None , fcs_file_ids = None , format = 'json' , layout = None , percent_of = None , population_ids = None ) update ( self , inplace = True ) Save changes to this Experiment to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description Experiment or None If inplace is True, returns a new Experiment. Otherwise, updates the current experiment. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Experiments"},{"location":"experiments/#experiments","text":"CellEngine API: Experiments An Experiment is largely a wrapper around the CellEngine Experiment, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment . Most methods available from the APIClient are available on an Experiment , with the first param experiment_id implicitly passed as the current experiment's ID.","title":"Experiments"},{"location":"experiments/#methods","text":"","title":"Methods"},{"location":"experiments/#cellengine.resources.experiment.Experiment","text":"","title":"Experiment"},{"location":"experiments/#cellengine.resources.experiment.Experiment.active_compensation","text":"","title":"active_compensation"},{"location":"experiments/#cellengine.resources.experiment.Experiment.attachments","text":"List all attachments on the experiment.","title":"attachments"},{"location":"experiments/#cellengine.resources.experiment.Experiment.compensations","text":"List all compensations on the experiment.","title":"compensations"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete","text":"Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered.","title":"delete"},{"location":"experiments/#cellengine.resources.experiment.Experiment.fcs_files","text":"List all files on the experiment.","title":"fcs_files"},{"location":"experiments/#cellengine.resources.experiment.Experiment.gates","text":"List all gates on the experiment.","title":"gates"},{"location":"experiments/#cellengine.resources.experiment.Experiment.populations","text":"List all populations in the experiment.","title":"populations"},{"location":"experiments/#cellengine.resources.experiment.Experiment.undelete","text":"Remove a scheduled deletion.","title":"undelete"},{"location":"experiments/#cellengine.resources.experiment.Experiment.clone","text":"Saves a deep copy of the experiment and all of its resources, including attachments, FCS files, gates and populations. Parameters: Name Type Description Default name The name to give the new experiment. Defaults to \"[Original Experiment]-1\" None as_dict Optionally return the new experiment as a dict. required Returns: Type Description A deep copy of the experiment.","title":"clone()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create","text":"Post a new experiment to CellEngine. Parameters: Name Type Description Default name str Defaults to \"Untitled Experiment\". None comments str Defaults to None. None uploader str Defaults to user making request. None primary_researcher str Defaults to user making request. None public bool Defaults to false. False tags List[str] Defaults to empty list. None as_dict Whether to return the experiment as an Experiment object or a dict. False Returns: Type Description Experiment Creates the Experiment on CellEngine and returns it.","title":"create()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_complex_population","text":"Create a complex population Parameters: Name Type Description Default name str Name of the population to create. required base_gate str ID of the gate to build a complex population from. required gates str IDs of other gates to include in the complex population. None Returns: Type Description Population A created complex population.","title":"create_complex_population()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_ellipse_gate","text":"","title":"create_ellipse_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_polygon_gate","text":"","title":"create_polygon_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_quadrant_gate","text":"","title":"create_quadrant_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_range_gate","text":"","title":"create_range_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_rectangle_gate","text":"","title":"create_rectangle_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_split_gate","text":"","title":"create_split_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete_gates","text":"","title":"delete_gates()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get","text":"","title":"get()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_attachment","text":"Get a specific attachment.","title":"get_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_compensation","text":"Get a specific compensation.","title":"get_compensation()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_fcs_file","text":"Get a specific fcs_file.","title":"get_fcs_file()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_gate","text":"Get a specific gate.","title":"get_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_population","text":"Get a specific population.","title":"get_population()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_statistics","text":"","title":"get_statistics()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.update","text":"Save changes to this Experiment to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description Experiment or None If inplace is True, returns a new Experiment. Otherwise, updates the current experiment.","title":"update()"},{"location":"experiments/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"fcs_files/","text":"FcsFiles CellEngine API: Fcs Files An FcsFile represents an .fcs file itself, as well as metadata such as the panel and annotations. Consumers of the API are expecgted to keep the channel names and reagent names consistent. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the FCS file. Methods cellengine.resources.fcs_file.FcsFile events property writable A DataFrame containing this file's data. This is fetched from the server on-demand the first time that this property is accessed. create ( experiment_id , fcs_files , filename , add_file_number = False , add_event_number = False , pre_subsample_n = None , pre_subsample_p = None , seed = None ) classmethod Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. This endpoint can be used to import files from other experiments. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required fcs_files List[str] ID of file or list of IDs of files or objects to process. If more than one file is provided, they will be concatenated in order. To import files from other experiments, pass a list of dicts with _id and experimentId properties. required add_file_number bool If concatenating files, adds a file number channel to the resulting file. False add_event_number bool Add an event number column to the exported file. This number corresponds to the index of the event in the original file; when concatenating files, the same event number will appear more than once. False pre_subsample_n int Randomly subsample the file to contain this many events. None pre_subsample_p int Randomly subsample the file to contain this percent of events (0 to 1). None seed int Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. None Returns: Type Description FcsFile delete ( self ) get ( experiment_id , _id = None , name = None ) classmethod plot ( self , x_channel , y_channel , plot_type , properties = None ) update ( self , inplace = True ) Save changes to this FcsFile to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description FcsFile or None If inplace is True, returns a new FcsFile. Otherwise, updates the current entity. upload ( experiment_id , filepath ) classmethod Uploads a file. The maximum file size is approximately 2.3 GB. Contact us if you need to work with larger files. Automatically parses panels and annotations and updates ScaleSets to include all channels in the file. The authenticated user must have write-access to the experiment. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required file The file contents. required TODO: add \"channels\" Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"FcsFiles"},{"location":"fcs_files/#fcsfiles","text":"CellEngine API: Fcs Files An FcsFile represents an .fcs file itself, as well as metadata such as the panel and annotations. Consumers of the API are expecgted to keep the channel names and reagent names consistent. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the FCS file.","title":"FcsFiles"},{"location":"fcs_files/#methods","text":"","title":"Methods"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile","text":"","title":"FcsFile"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.events","text":"A DataFrame containing this file's data. This is fetched from the server on-demand the first time that this property is accessed.","title":"events"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.create","text":"Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. This endpoint can be used to import files from other experiments. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required fcs_files List[str] ID of file or list of IDs of files or objects to process. If more than one file is provided, they will be concatenated in order. To import files from other experiments, pass a list of dicts with _id and experimentId properties. required add_file_number bool If concatenating files, adds a file number channel to the resulting file. False add_event_number bool Add an event number column to the exported file. This number corresponds to the index of the event in the original file; when concatenating files, the same event number will appear more than once. False pre_subsample_n int Randomly subsample the file to contain this many events. None pre_subsample_p int Randomly subsample the file to contain this percent of events (0 to 1). None seed int Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. None Returns: Type Description FcsFile","title":"create()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.delete","text":"","title":"delete()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.get","text":"","title":"get()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.plot","text":"","title":"plot()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.update","text":"Save changes to this FcsFile to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. True Returns: Type Description FcsFile or None If inplace is True, returns a new FcsFile. Otherwise, updates the current entity.","title":"update()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.upload","text":"Uploads a file. The maximum file size is approximately 2.3 GB. Contact us if you need to work with larger files. Automatically parses panels and annotations and updates ScaleSets to include all channels in the file. The authenticated user must have write-access to the experiment. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required file The file contents. required TODO: add \"channels\"","title":"upload()"},{"location":"fcs_files/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"gates/","text":"Gates CellEngine API: Gates A Gate is a wrapper around the CellEngine Gate object, with getter and setter methods for writable properties and helper methods. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. When creating gates, all gate types share some required and optional arguments, which are [documented][cellengine.resources.gate.Gate] on the base Gate class. Gate-specific arguments are documented in each gate type. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Gate. Gate ABC and Methods Although you should not instantiate the Gate class, each gate type will inherit the methods below. cellengine.resources.gate.Gate build ( gates ) classmethod Build a Gate object from a dict of properties. Parameters: Name Type Description Default experiment_id str The ID of the experiment to which to add the gate. Use when calling this as a static method; not needed when calling from an Experiment object. required name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. If you wish you create a tailored gate, you must specify the gid of the global tailored gate. required parent_population_id str ID of the parent population. Use None for the 'ungated' population. If specified, do not specify parent_population . required parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . required tailored_per_file bool Whether or not this gate is tailored per FCS file. required fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . required fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . required locked bool Prevents modification of the gate via the web interface. required create_population bool Automatically create corresponding population. required delete ( self ) delete_gates ( experiment_id , _id = None , gid = None , exclude = None ) staticmethod Deletes a gate or a tailored gate family. Works for compound gates if you specify the top-level gid. Specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted. If gateId is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experimentId str ID of experiment. required _id str ID of gate family. None gateId str ID of gate. required exclude str Gate ID to exclude from deletion. None Examples: cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None get ( experiment_id , _id = None , name = None ) classmethod Get a specific gate. post ( self ) update ( self ) Save changes to this Gate to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. required Returns: Type Description Gate or None If inplace is True, returns a new Gate. Otherwise, updates the current entity. Gate Types cellengine.resources.gate.RectangleGate cellengine.resources.gate.PolygonGate Basic concrete class for polygon gates cellengine.resources.gate.EllipseGate Basic concrete class for ellipse gates cellengine.resources.gate.RangeGate Basic concrete class for range gates cellengine.resources.gate.SplitGate Basic concrete class for split gates cellengine.resources.gate.QuadrantGate Basic concrete class for quadrant gates Gate Models Gates have a model property, which is a nested dict object. For convenience, the model property has dot-indexing for getting and setting properties. For instance: > gate = experiment . gates [ 0 ] > gate . model Munch ({ 'polygon' : Munch ({ 'vertices' : [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]]}), 'locked' : 'orange' , 'label' : [ 7.62844 , 6.19701 ]}) > gate . model . polygon . vertices [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]] You can set the values of these properties. You must explicitly call the update method for these changes to be saved to CellEngine. > gate . model . locked True > gate . model . locked = False > gate . update () > gate . model . locked False You may set invalid values, but update will fail with an API error: > gate . model . locked = \"orange\" > gate . model . locked \"orange\" > gate . update () APIError : CellEngine API : status code 400 != 200 for URL https : // cellengine . com / api / v1 / experiments /.../ gates /... -- \"locked\" must be a Boolean . Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Gates"},{"location":"gates/#gates","text":"CellEngine API: Gates A Gate is a wrapper around the CellEngine Gate object, with getter and setter methods for writable properties and helper methods. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. When creating gates, all gate types share some required and optional arguments, which are [documented][cellengine.resources.gate.Gate] on the base Gate class. Gate-specific arguments are documented in each gate type. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Gate.","title":"Gates"},{"location":"gates/#gate-abc-and-methods","text":"Although you should not instantiate the Gate class, each gate type will inherit the methods below.","title":"Gate ABC and Methods"},{"location":"gates/#cellengine.resources.gate.Gate","text":"","title":"Gate"},{"location":"gates/#cellengine.resources.gate.Gate.build","text":"Build a Gate object from a dict of properties. Parameters: Name Type Description Default experiment_id str The ID of the experiment to which to add the gate. Use when calling this as a static method; not needed when calling from an Experiment object. required name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. If you wish you create a tailored gate, you must specify the gid of the global tailored gate. required parent_population_id str ID of the parent population. Use None for the 'ungated' population. If specified, do not specify parent_population . required parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . required tailored_per_file bool Whether or not this gate is tailored per FCS file. required fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . required fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . required locked bool Prevents modification of the gate via the web interface. required create_population bool Automatically create corresponding population. required","title":"build()"},{"location":"gates/#cellengine.resources.gate.Gate.delete","text":"","title":"delete()"},{"location":"gates/#cellengine.resources.gate.Gate.delete_gates","text":"Deletes a gate or a tailored gate family. Works for compound gates if you specify the top-level gid. Specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted. If gateId is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experimentId str ID of experiment. required _id str ID of gate family. None gateId str ID of gate. required exclude str Gate ID to exclude from deletion. None Examples: cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None","title":"delete_gates()"},{"location":"gates/#cellengine.resources.gate.Gate.get","text":"Get a specific gate.","title":"get()"},{"location":"gates/#cellengine.resources.gate.Gate.post","text":"","title":"post()"},{"location":"gates/#cellengine.resources.gate.Gate.update","text":"Save changes to this Gate to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. required Returns: Type Description Gate or None If inplace is True, returns a new Gate. Otherwise, updates the current entity.","title":"update()"},{"location":"gates/#gate-types","text":"","title":"Gate Types"},{"location":"gates/#cellengine.resources.gate.RectangleGate","text":"","title":"RectangleGate"},{"location":"gates/#cellengine.resources.gate.PolygonGate","text":"Basic concrete class for polygon gates","title":"PolygonGate"},{"location":"gates/#cellengine.resources.gate.EllipseGate","text":"Basic concrete class for ellipse gates","title":"EllipseGate"},{"location":"gates/#cellengine.resources.gate.RangeGate","text":"Basic concrete class for range gates","title":"RangeGate"},{"location":"gates/#cellengine.resources.gate.SplitGate","text":"Basic concrete class for split gates","title":"SplitGate"},{"location":"gates/#cellengine.resources.gate.QuadrantGate","text":"Basic concrete class for quadrant gates","title":"QuadrantGate"},{"location":"gates/#gate-models","text":"Gates have a model property, which is a nested dict object. For convenience, the model property has dot-indexing for getting and setting properties. For instance: > gate = experiment . gates [ 0 ] > gate . model Munch ({ 'polygon' : Munch ({ 'vertices' : [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]]}), 'locked' : 'orange' , 'label' : [ 7.62844 , 6.19701 ]}) > gate . model . polygon . vertices [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]] You can set the values of these properties. You must explicitly call the update method for these changes to be saved to CellEngine. > gate . model . locked True > gate . model . locked = False > gate . update () > gate . model . locked False You may set invalid values, but update will fail with an API error: > gate . model . locked = \"orange\" > gate . model . locked \"orange\" > gate . update () APIError : CellEngine API : status code 400 != 200 for URL https : // cellengine . com / api / v1 / experiments /.../ gates /... -- \"locked\" must be a Boolean .","title":"Gate Models"},{"location":"gates/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"plots/","text":"Plots CellEngine API: Plots A Plot is largely a wrapper around the CellEngine Plot, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Plot . Methods cellengine.resources.plot.Plot A class representing a CellEngine plot. !!! attributes experiment_id (str): ID of the experiment to which the file belongs. fcs_file_id (str): ID of file for which to build a plot. x_channel (str): X channel name. y_channel (str): (for 2D plots) Y channel name. plot_type (str): \"contour\", \"dot\", \"density\" or \"histogram\" (case-insensitive) population_id (ID): Defaults to ungated. properties (dict): Optional attributes in camelCase dict: {\"property\": value} compensation (ID): Compensation to use for gating and display. width (int): Image width. Defaults to 228. height (int): Image height. Defaults to 228. axesQ (bool): Display axes lines. Defaults to true. ticksQ (bool): Display ticks. Defaults to true. tickLabelsQ (bool): Display tick labels. Defaults to false. axisLabelsQ (bool): Display axis labels. Defaults to true. xAxisQ (bool): Display x axis line. Overrides axesQ. yAxisQ (bool): Display y axis line. Overrides axesQ. xTicksQ (bool): Display x ticks. Overrides ticksQ. yTicksQ (bool): Display y ticks. Overrides ticksQ. xTickLabelsQ (bool): Display x tick labels. overrides tickLabelsQ. yTickLabelsQ (bool): Display y tick labels. Overrides tickLabelsQ. xAxisLabelQ (bool): Display x axis label. Overrides axisLabelsQ. yAxisLabelQ (bool): Display y axis label. Overrides axisLabelsQ. color (str): Case-insensitive string in the format #rgb, #rgba, #rrggbb or #rrggbbaa. The foreground color, i.e. color of curve in \"histogram\" plots and dots in \"dot\" plots. renderGates (bool): Render gates into the image. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. seed (float): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. smoothing (float): For density plots, adjusts the amount of smoothing. Defaults to 0 (no smoothing). Set to 1 for optimal smoothing. Higher values increase smoothing. display ( self ) get ( experiment_id , fcs_file_id , x_channel , y_channel , plot_type , population_id = None , properties = None , as_dict = False ) classmethod save ( self , filepath ) Properties The Python SDK Plot only has accessible display , get , and save methods. In the case of Plot , properties refers to an optional dictionary of configuration arguments to pass to the get method. Options are detailed above.","title":"Plots"},{"location":"plots/#plots","text":"CellEngine API: Plots A Plot is largely a wrapper around the CellEngine Plot, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Plot .","title":"Plots"},{"location":"plots/#methods","text":"","title":"Methods"},{"location":"plots/#cellengine.resources.plot.Plot","text":"A class representing a CellEngine plot. !!! attributes experiment_id (str): ID of the experiment to which the file belongs. fcs_file_id (str): ID of file for which to build a plot. x_channel (str): X channel name. y_channel (str): (for 2D plots) Y channel name. plot_type (str): \"contour\", \"dot\", \"density\" or \"histogram\" (case-insensitive) population_id (ID): Defaults to ungated. properties (dict): Optional attributes in camelCase dict: {\"property\": value} compensation (ID): Compensation to use for gating and display. width (int): Image width. Defaults to 228. height (int): Image height. Defaults to 228. axesQ (bool): Display axes lines. Defaults to true. ticksQ (bool): Display ticks. Defaults to true. tickLabelsQ (bool): Display tick labels. Defaults to false. axisLabelsQ (bool): Display axis labels. Defaults to true. xAxisQ (bool): Display x axis line. Overrides axesQ. yAxisQ (bool): Display y axis line. Overrides axesQ. xTicksQ (bool): Display x ticks. Overrides ticksQ. yTicksQ (bool): Display y ticks. Overrides ticksQ. xTickLabelsQ (bool): Display x tick labels. overrides tickLabelsQ. yTickLabelsQ (bool): Display y tick labels. Overrides tickLabelsQ. xAxisLabelQ (bool): Display x axis label. Overrides axisLabelsQ. yAxisLabelQ (bool): Display y axis label. Overrides axisLabelsQ. color (str): Case-insensitive string in the format #rgb, #rgba, #rrggbb or #rrggbbaa. The foreground color, i.e. color of curve in \"histogram\" plots and dots in \"dot\" plots. renderGates (bool): Render gates into the image. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. seed (float): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. smoothing (float): For density plots, adjusts the amount of smoothing. Defaults to 0 (no smoothing). Set to 1 for optimal smoothing. Higher values increase smoothing.","title":"Plot"},{"location":"plots/#cellengine.resources.plot.Plot.display","text":"","title":"display()"},{"location":"plots/#cellengine.resources.plot.Plot.get","text":"","title":"get()"},{"location":"plots/#cellengine.resources.plot.Plot.save","text":"","title":"save()"},{"location":"plots/#properties","text":"The Python SDK Plot only has accessible display , get , and save methods. In the case of Plot , properties refers to an optional dictionary of configuration arguments to pass to the get method. Options are detailed above.","title":"Properties"},{"location":"populations/","text":"Populations CellEngine API: Populations A Population is largely a wrapper around the CellEngine Population, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Population . Methods cellengine.resources.population.Population create ( experiment_id , compensation ) classmethod delete ( self ) get ( experiment_id , _id = None , name = None ) classmethod update ( self ) Save changes to this Population to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. required Returns: Type Description Population or None If inplace is True, returns a new Population. Otherwise, updates the current entity. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Populations"},{"location":"populations/#populations","text":"CellEngine API: Populations A Population is largely a wrapper around the CellEngine Population, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Population .","title":"Populations"},{"location":"populations/#methods","text":"","title":"Methods"},{"location":"populations/#cellengine.resources.population.Population","text":"","title":"Population"},{"location":"populations/#cellengine.resources.population.Population.create","text":"","title":"create()"},{"location":"populations/#cellengine.resources.population.Population.delete","text":"","title":"delete()"},{"location":"populations/#cellengine.resources.population.Population.get","text":"","title":"get()"},{"location":"populations/#cellengine.resources.population.Population.update","text":"Save changes to this Population to CellEngine. Parameters: Name Type Description Default inplace bool Update this entity or return a new one. required Returns: Type Description Population or None If inplace is True, returns a new Population. Otherwise, updates the current entity.","title":"update()"},{"location":"populations/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"recipes/","text":"Recipes for common operations from cellengine.utils.api_client.APIClient import APIClient client = cellengine . APIClient ( \"username\" , \"password\" ) e = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcsfile ( experiment_id = e . _id , name = \"my fcs file\" ) pops = e . populations p = e . get_population ( name = \"my population name\" )","title":"Cookbook"},{"location":"recipes/#recipes-for-common-operations","text":"from cellengine.utils.api_client.APIClient import APIClient client = cellengine . APIClient ( \"username\" , \"password\" ) e = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcsfile ( experiment_id = e . _id , name = \"my fcs file\" ) pops = e . populations p = e . get_population ( name = \"my population name\" )","title":"Recipes for common operations"},{"location":"scalesets/","text":"ScaleSets CellEngine API: ScaleSets A scale set is a set of scales (one scale per channel name for all channels in the experiment). Each experiment has exactly one scale set. Uploading a file updates the experiment's scale set to ensure that the new file's channels are included. If a new channel must be added to a ScaleSet, the default scale from the FCS file will be used. Currently, ScaleSets are a raw Dict.","title":"ScaleSets"},{"location":"scalesets/#scalesets","text":"CellEngine API: ScaleSets A scale set is a set of scales (one scale per channel name for all channels in the experiment). Each experiment has exactly one scale set. Uploading a file updates the experiment's scale set to ensure that the new file's channels are included. If a new channel must be added to a ScaleSet, the default scale from the FCS file will be used. Currently, ScaleSets are a raw Dict.","title":"ScaleSets"},{"location":"statistics/","text":"Statistics CellEngine API: Statistics Programmatically use CellEngine for statistical analysis. cellengine.utils.api_client.APIClient.APIClient.get_statistics ( self , experiment_id , statistics , channels , q = None , annotations = False , compensation_id = None , fcs_file_ids = None , format = 'json' , layout = None , percent_of = None , population_ids = None ) Request Statistics from CellEngine. Parameters: Name Type Description Default experiment_id str ID of experiment to request statistics for. required statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations Optional[bool] bool: Include file annotations in output (defaults to False). False compensation_id Optional[str] str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids Optional[List[str]] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format Optional[str] str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional[str] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional[Union[str, List[str]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. None population_ids Optional[List[str]] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe Source code in cellengine/utils/api_client/APIClient.py 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 def get_statistics ( self , experiment_id : str , statistics : Union [ str , List [ str ]], channels : List [ str ], q : float = None , annotations : Optional [ bool ] = False , compensation_id : Optional [ str ] = None , fcs_file_ids : Optional [ List [ str ]] = None , format : Optional [ str ] = \"json\" , layout : Optional [ str ] = None , percent_of : Optional [ Union [ str , List [ str ]]] = None , population_ids : Optional [ List [ str ]] = None , ): \"\"\" Request Statistics from CellEngine. Args: experiment_id: ID of experiment to request statistics for. statistics: Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). q: int: quantile (required for \"quantile\" statistic) channels: str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. annotations (optional): bool: Include file annotations in output (defaults to False). compensation_id (optional): str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. fcs_file_ids (optional): List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. format (optional): str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. layout (optional): str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". percent_of (optional): str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. population_ids (optional): List[str]: List of population IDs. Defaults to ungated. Returns: statistics: Dict, String, or pandas.Dataframe \"\"\" def determine_format ( f ): if f == \"pandas\" : return \"json\" else : return f if \"quantile\" == statistics : try : assert q except AssertionError : raise ValueError ( \"'q' is a required parameter for 'quantile' statistics.\" ) params = { \"statistics\" : statistics , \"q\" : q , \"channels\" : channels , \"annotations\" : annotations , \"compensationId\" : compensation_id , \"fcsFileIds\" : fcs_file_ids , \"format\" : determine_format ( format ), \"layout\" : layout , \"percentOf\" : percent_of , \"populationIds\" : population_ids , } req_params = { key : val for key , val in params . items () if val is not None } raw_stats = self . _post ( f \" { self . endpoint_base } /experiments/ { experiment_id } /bulkstatistics\" , json = req_params , raw = True , ) format = format . lower () if format == \"json\" : return json . loads ( raw_stats ) elif \"sv\" in format : try : return raw_stats . decode () except Exception as e : raise ValueError ( \"Invalid output format {} \" . format ( format ), e ) elif format == \"pandas\" : try : return pandas . DataFrame . from_dict ( json . loads ( raw_stats )) except Exception as e : raise ValueError ( \"Invalid data format {} for pandas\" . format ( format ), e )","title":"Statistics"},{"location":"statistics/#statistics","text":"CellEngine API: Statistics Programmatically use CellEngine for statistical analysis.","title":"Statistics"},{"location":"statistics/#cellengine.utils.api_client.APIClient.APIClient.get_statistics","text":"Request Statistics from CellEngine. Parameters: Name Type Description Default experiment_id str ID of experiment to request statistics for. required statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations Optional[bool] bool: Include file annotations in output (defaults to False). False compensation_id Optional[str] str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids Optional[List[str]] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format Optional[str] str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional[str] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional[Union[str, List[str]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. None population_ids Optional[List[str]] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe Source code in cellengine/utils/api_client/APIClient.py 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 def get_statistics ( self , experiment_id : str , statistics : Union [ str , List [ str ]], channels : List [ str ], q : float = None , annotations : Optional [ bool ] = False , compensation_id : Optional [ str ] = None , fcs_file_ids : Optional [ List [ str ]] = None , format : Optional [ str ] = \"json\" , layout : Optional [ str ] = None , percent_of : Optional [ Union [ str , List [ str ]]] = None , population_ids : Optional [ List [ str ]] = None , ): \"\"\" Request Statistics from CellEngine. Args: experiment_id: ID of experiment to request statistics for. statistics: Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). q: int: quantile (required for \"quantile\" statistic) channels: str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. annotations (optional): bool: Include file annotations in output (defaults to False). compensation_id (optional): str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. fcs_file_ids (optional): List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. format (optional): str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. layout (optional): str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". percent_of (optional): str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. population_ids (optional): List[str]: List of population IDs. Defaults to ungated. Returns: statistics: Dict, String, or pandas.Dataframe \"\"\" def determine_format ( f ): if f == \"pandas\" : return \"json\" else : return f if \"quantile\" == statistics : try : assert q except AssertionError : raise ValueError ( \"'q' is a required parameter for 'quantile' statistics.\" ) params = { \"statistics\" : statistics , \"q\" : q , \"channels\" : channels , \"annotations\" : annotations , \"compensationId\" : compensation_id , \"fcsFileIds\" : fcs_file_ids , \"format\" : determine_format ( format ), \"layout\" : layout , \"percentOf\" : percent_of , \"populationIds\" : population_ids , } req_params = { key : val for key , val in params . items () if val is not None } raw_stats = self . _post ( f \" { self . endpoint_base } /experiments/ { experiment_id } /bulkstatistics\" , json = req_params , raw = True , ) format = format . lower () if format == \"json\" : return json . loads ( raw_stats ) elif \"sv\" in format : try : return raw_stats . decode () except Exception as e : raise ValueError ( \"Invalid output format {} \" . format ( format ), e ) elif format == \"pandas\" : try : return pandas . DataFrame . from_dict ( json . loads ( raw_stats )) except Exception as e : raise ValueError ( \"Invalid data format {} for pandas\" . format ( format ), e )","title":"get_statistics()"}]}