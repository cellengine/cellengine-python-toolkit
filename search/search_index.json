{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CellEngine API Toolkit for Python For full API documentation visit CellEngine . Quickstart Install cellengine-python-toolkit using pip : $ pip install git+https://github.com/primitybio/cellengine-python-toolkit.git import cellengine client = cellengine . Client ( username = \"jason\" ) # password will be prompted experiment = client . get_experiment ( \"My experiment\" ) Resources GitHub API documentation","title":"Home"},{"location":"#cellengine-api-toolkit-for-python","text":"For full API documentation visit CellEngine .","title":"CellEngine API Toolkit for Python"},{"location":"#quickstart","text":"Install cellengine-python-toolkit using pip : $ pip install git+https://github.com/primitybio/cellengine-python-toolkit.git import cellengine client = cellengine . Client ( username = \"jason\" ) # password will be prompted experiment = client . get_experiment ( \"My experiment\" )","title":"Quickstart"},{"location":"#resources","text":"GitHub API documentation","title":"Resources"},{"location":"attachment/","text":"Attachments CellEngine API: Attachments Attachments are non-data files stored on an experiment For accessible properties, see Properties . Methods are available for common access and transformations on the Attachment. Methods cellengine.resources.attachments.Attachment A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment. create ( experiment_id , filepath ) classmethod delete ( self ) download ( self , to_file = None ) Download the attachment. Defaults to returning the file. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Filepath at which to save the file. Accepts relative or absolute path. None Returns: Type Description content JSON-serializable if possible, otherwise the raw response content. list ( experiment_id ) classmethod update ( self ) Save any changed data to CellEngine. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Attachments"},{"location":"attachment/#attachments","text":"CellEngine API: Attachments Attachments are non-data files stored on an experiment For accessible properties, see Properties . Methods are available for common access and transformations on the Attachment.","title":"Attachments"},{"location":"attachment/#methods","text":"","title":"Methods"},{"location":"attachment/#cellengine.resources.attachments.Attachment","text":"A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment.","title":"Attachment"},{"location":"attachment/#cellengine.resources.attachments.Attachment.create","text":"","title":"create()"},{"location":"attachment/#cellengine.resources.attachments.Attachment.delete","text":"","title":"delete()"},{"location":"attachment/#cellengine.resources.attachments.Attachment.download","text":"Download the attachment. Defaults to returning the file. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Filepath at which to save the file. Accepts relative or absolute path. None Returns: Type Description content JSON-serializable if possible, otherwise the raw response content.","title":"download()"},{"location":"attachment/#cellengine.resources.attachments.Attachment.list","text":"","title":"list()"},{"location":"attachment/#cellengine.resources.attachments.Attachment.update","text":"Save any changed data to CellEngine.","title":"update()"},{"location":"attachment/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"compensation/","text":"Compensations CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\"/\"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame. For accessible properties, see Properties . Methods are available for common access and transformations on the Compensation. Methods cellengine.resources.compensation.Compensation A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them. dataframe property readonly Get the compensation matrix as a Pandas DataFrame. apply ( self , file , inplace = True ) Compensates the file's data. Parameters: Name Type Description Default file FcsFile The FCS file to compensate. required inplace bool Compensate the file's data in-place. True Returns: Type Description DataFrame or None if inplace=True , returns nothing. dataframe_as_html ( self ) Return the compensation matrix dataframe as HTML. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Compensations"},{"location":"compensation/#compensations","text":"CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\"/\"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame. For accessible properties, see Properties . Methods are available for common access and transformations on the Compensation.","title":"Compensations"},{"location":"compensation/#methods","text":"","title":"Methods"},{"location":"compensation/#cellengine.resources.compensation.Compensation","text":"A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them.","title":"Compensation"},{"location":"compensation/#cellengine.resources.compensation.Compensation.dataframe","text":"Get the compensation matrix as a Pandas DataFrame.","title":"dataframe"},{"location":"compensation/#cellengine.resources.compensation.Compensation.apply","text":"Compensates the file's data. Parameters: Name Type Description Default file FcsFile The FCS file to compensate. required inplace bool Compensate the file's data in-place. True Returns: Type Description DataFrame or None if inplace=True , returns nothing.","title":"apply()"},{"location":"compensation/#cellengine.resources.compensation.Compensation.dataframe_as_html","text":"Return the compensation matrix dataframe as HTML.","title":"dataframe_as_html()"},{"location":"compensation/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"contributing/","text":"Contributing","title":"Development"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"experiment/","text":"Experiments CellEngine API: Experiments An Experiment is largely a wrapper around the CellEngine Experiment, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment. Methods cellengine.resources.experiment.Experiment A class representing a CellEngine experiment. Attributes _properties (dict): Experiment properties; required for initialization. attachments property readonly List all attachments on the experiment Returns: Type Description List[Attachment] A list of attachments on this experiment. compensations property readonly List all compensations on the experiment Returns: Type Description List[Compensation] A list of compensations on this experiment. files property readonly List all files on the experiment Returns: Type Description List[FcsFile] A list of fcsfiles on this experiment. gates property readonly List all gates on the experiment Returns: Type Description List[Gate] A list of gates on this experiment. populations property readonly List all populations in the experiment Returns: Type Description List[Population] A list of populations on this experiment. create_complex_population ( self , name , base_gate , gates = None ) Create a complex population Parameters: Name Type Description Default name str Name of the population to create. required base_gate str ID of the gate to build a complex population from. required gates str IDs of other gates to include in the complex population. None Returns: Type Description Population A created complex population. create_ellipse_gate ( self , * args , ** kwargs ) Creates an ellipse gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. required Returns: Type Description EllipseGate An EllipseGate object. Example cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) create_polygon_gate ( self , * args , ** kwargs ) Creates a polygon gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x_vertices List[float] List of x coordinates for the polygon's vertices. required y_vertices List[float] List of y coordinates for the polygon's vertices. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. required Returns: Type Description PolygonGate A PolygonGate object. Example experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x_vertices = [ 1 , 2 , 3 ], y_vertices = [ 4 , 5 , 6 ]) create_quadrant_gate ( self , * args , ** kwargs ) Creates a quadrant gate. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of four length-2 lists in the order: UR, UL, LL, LR. These are set automatically to the plot corners. required gids List[str] Group IDs of each sector, assigned to model.gids . required Returns: Type Description QuadrantGate A QuadrantGate object. Example cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 , labels = [[ 1 , 2 ] [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) create_range_gate ( self , * args , ** kwargs ) Creates a range gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines, in the required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. required Returns: Type Description RangeGate A RangeGate object. Example experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 ) create_rectangle_gate ( self , * args , ** kwargs ) Creates a rectangle gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required Returns: Type Description RectangleGate A RectangleGate object. Example experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) # or: cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.5 , x2 = 95.1 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid ) create_split_gate ( self , * args , ** kwargs ) Creates a split gate. Split gates have two sectors (right and left), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). y: The y coordinate of the dashed line extending from the center point (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. required gids List[str] Group IDs of each sector, assigned to model.gids. required Returns: Type Description SplitGate A SplitGate object. Example cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) delete_gates ( self , experiment_id , _id = None , gid = None , exclude = None ) Deletes a gate or a tailored gate family. Works for compound gates if you specify the top-level gid. Specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted. If gateId is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experimentId str ID of experiment. required _id str ID of gate family. None gateId str ID of gate. required exclude str Gate ID to exclude from deletion. None Example cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None get_fcsfile ( self , _id = None , name = None ) Get a single fcsfile Returns: Type Description FcsFile update ( self ) Save changes to this Experiment object to CellEngine. Returns: Type Description None Updates the Experiment on CellEngine and then synchronizes the properties with the current Experiment object. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Experiments"},{"location":"experiment/#experiments","text":"CellEngine API: Experiments An Experiment is largely a wrapper around the CellEngine Experiment, with getter and setter methods for writable properties and helper methods. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment.","title":"Experiments"},{"location":"experiment/#methods","text":"","title":"Methods"},{"location":"experiment/#cellengine.resources.experiment.Experiment","text":"A class representing a CellEngine experiment. Attributes _properties (dict): Experiment properties; required for initialization.","title":"Experiment"},{"location":"experiment/#cellengine.resources.experiment.Experiment.attachments","text":"List all attachments on the experiment Returns: Type Description List[Attachment] A list of attachments on this experiment.","title":"attachments"},{"location":"experiment/#cellengine.resources.experiment.Experiment.compensations","text":"List all compensations on the experiment Returns: Type Description List[Compensation] A list of compensations on this experiment.","title":"compensations"},{"location":"experiment/#cellengine.resources.experiment.Experiment.files","text":"List all files on the experiment Returns: Type Description List[FcsFile] A list of fcsfiles on this experiment.","title":"files"},{"location":"experiment/#cellengine.resources.experiment.Experiment.gates","text":"List all gates on the experiment Returns: Type Description List[Gate] A list of gates on this experiment.","title":"gates"},{"location":"experiment/#cellengine.resources.experiment.Experiment.populations","text":"List all populations in the experiment Returns: Type Description List[Population] A list of populations on this experiment.","title":"populations"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_complex_population","text":"Create a complex population Parameters: Name Type Description Default name str Name of the population to create. required base_gate str ID of the gate to build a complex population from. required gates str IDs of other gates to include in the complex population. None Returns: Type Description Population A created complex population.","title":"create_complex_population()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_ellipse_gate","text":"Creates an ellipse gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. required Returns: Type Description EllipseGate An EllipseGate object. Example cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 )","title":"create_ellipse_gate()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_polygon_gate","text":"Creates a polygon gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x_vertices List[float] List of x coordinates for the polygon's vertices. required y_vertices List[float] List of y coordinates for the polygon's vertices. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. required Returns: Type Description PolygonGate A PolygonGate object. Example experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x_vertices = [ 1 , 2 , 3 ], y_vertices = [ 4 , 5 , 6 ])","title":"create_polygon_gate()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_quadrant_gate","text":"Creates a quadrant gate. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of four length-2 lists in the order: UR, UL, LL, LR. These are set automatically to the plot corners. required gids List[str] Group IDs of each sector, assigned to model.gids . required Returns: Type Description QuadrantGate A QuadrantGate object. Example cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 , labels = [[ 1 , 2 ] [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]])","title":"create_quadrant_gate()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_range_gate","text":"Creates a range gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines, in the required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. required Returns: Type Description RangeGate A RangeGate object. Example experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 )","title":"create_range_gate()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_rectangle_gate","text":"Creates a rectangle gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required Returns: Type Description RectangleGate A RectangleGate object. Example experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) # or: cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.5 , x2 = 95.1 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid )","title":"create_rectangle_gate()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.create_split_gate","text":"Creates a split gate. Split gates have two sectors (right and left), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). y: The y coordinate of the dashed line extending from the center point (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. required gids List[str] Group IDs of each sector, assigned to model.gids. required Returns: Type Description SplitGate A SplitGate object. Example cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 )","title":"create_split_gate()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.delete_gates","text":"Deletes a gate or a tailored gate family. Works for compound gates if you specify the top-level gid. Specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted. If gateId is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experimentId str ID of experiment. required _id str ID of gate family. None gateId str ID of gate. required exclude str Gate ID to exclude from deletion. None Example cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None","title":"delete_gates()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.get_fcsfile","text":"Get a single fcsfile Returns: Type Description FcsFile","title":"get_fcsfile()"},{"location":"experiment/#cellengine.resources.experiment.Experiment.update","text":"Save changes to this Experiment object to CellEngine. Returns: Type Description None Updates the Experiment on CellEngine and then synchronizes the properties with the current Experiment object.","title":"update()"},{"location":"experiment/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"fcsfile/","text":"FcsFiles CellEngine API: Fcs Files An FcsFile represents an .fcs file itself, as well as metadata such as the panel and annotations. Consumers of the API are expecgted to keep the channel names and reagent names consistent. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the FCS file. Methods cellengine.resources.fcsfile.FcsFile A class representing a CellEngine FCS file. update ( self ) Save any changed data to CellEngine. TODO: add \"channels\" Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"FcsFiles"},{"location":"fcsfile/#fcsfiles","text":"CellEngine API: Fcs Files An FcsFile represents an .fcs file itself, as well as metadata such as the panel and annotations. Consumers of the API are expecgted to keep the channel names and reagent names consistent. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the FCS file.","title":"FcsFiles"},{"location":"fcsfile/#methods","text":"","title":"Methods"},{"location":"fcsfile/#cellengine.resources.fcsfile.FcsFile","text":"A class representing a CellEngine FCS file.","title":"FcsFile"},{"location":"fcsfile/#cellengine.resources.fcsfile.FcsFile.update","text":"Save any changed data to CellEngine. TODO: add \"channels\"","title":"update()"},{"location":"fcsfile/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API otherwise noted.","title":"Properties"},{"location":"gate/","text":"Gates CellEngine API: Gates A Gate is a wrapper around the CellEngine Gate object, with getter and setter methods for writable properties and helper methods. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. When creating gates, all gate types share some required and optional arguments, which are [documented][cellengine.resources.gate.Gate] on the base Gate class. Gate-specific arguments are documented in each gate type. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Gate. Gate ABC and Methods Although you should not instantiate the Gate class, each gate type will inherit the methods below. cellengine.resources.gate.Gate (In all gate types, refer to help for each gate for args specific to that gate.) Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. If you wish you create a tailored gate, you must specify the gid of the global tailored gate. ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . locked: Prevents modification of the gate via the web interface. create_population: Automatically create corresponding population. model property writable Return an attribute-style dict of the model. NOTE: This approach allows users to change the model properties to invalid values (i.e. 'rectangle' to a str from a dict). We could prevent this by making Gate.model return a slot class \"Model\", where each attr of Model was built dynamically. I wrote it this way at first, but couldn't figure out a way to write both get and set attribute-style accessors for the class. Munch does this really nicely. As it is, this relies on the API to validate the model create ( gates ) classmethod Build a Gate object from a dict of properties. Parameters: Name Type Description Default experiment_id str The ID of the experiment to which to add the gate. Use when calling this as a static method; not needed when calling from an Experiment object. required name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. If you wish you create a tailored gate, you must specify the gid of the global tailored gate. required parent_population_id str ID of the parent population. Use None for the 'ungated' population. If specified, do not specify parent_population . required parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . required tailored_per_file bool Whether or not this gate is tailored per FCS file. required fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . required fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . required locked bool Prevents modification of the gate via the web interface. required create_population bool Automatically create corresponding population. required delete_gates ( experiment_id , _id = None , gid = None , exclude = None ) staticmethod Deletes a gate or a tailored gate family. Works for compound gates if you specify the top-level gid. Specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted. If gateId is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experimentId str ID of experiment. required _id str ID of gate family. None gateId str ID of gate. required exclude str Gate ID to exclude from deletion. None Example cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None post ( self ) Post a gate and update properties. update ( self ) Gate Types cellengine.resources.gate.RectangleGate Basic concrete class for rectangle gates create ( experiment_id , x_channel , y_channel , name , x1 , x2 , y1 , y2 , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) staticmethod Creates a rectangle gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required Returns: Type Description RectangleGate A RectangleGate object. Example experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) # or: cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.5 , x2 = 95.1 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid ) cellengine.resources.gate.PolygonGate Basic concrete class for polygon gates create ( experiment_id , x_channel , y_channel , name , x_vertices , y_vertices , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) staticmethod Creates a polygon gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x_vertices List[float] List of x coordinates for the polygon's vertices. required y_vertices List[float] List of y coordinates for the polygon's vertices. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. [] Returns: Type Description PolygonGate A PolygonGate object. Example experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x_vertices = [ 1 , 2 , 3 ], y_vertices = [ 4 , 5 , 6 ]) cellengine.resources.gate.EllipseGate Basic concrete class for ellipse gates create ( experiment_id , x_channel , y_channel , name , x , y , angle , major , minor , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) staticmethod Creates an ellipse gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. [] Returns: Type Description EllipseGate An EllipseGate object. Example cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) cellengine.resources.gate.RangeGate Basic concrete class for range gates create ( experiment_id , x_channel , name , x1 , x2 , y = 0.5 , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Creates a range gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines, in the 0.5 label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. [] Returns: Type Description RangeGate A RangeGate object. Example experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 ) cellengine.resources.gate.SplitGate Basic concrete class for split gates create ( experiment_id , x_channel , name , x , y , labels = [], gid = None , gids = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Creates a split gate. Split gates have two sectors (right and left), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). y: The y coordinate of the dashed line extending from the center point (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gids List[str] Group IDs of each sector, assigned to model.gids. None Returns: Type Description SplitGate A SplitGate object. Example cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) cellengine.resources.gate.QuadrantGate Basic concrete class for quadrant gates create ( experiment_id , x_channel , y_channel , name , x , y , labels = [], gid = None , gids = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Creates a quadrant gate. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of four length-2 lists in the order: UR, UL, LL, LR. These are set automatically to the plot corners. [] gids List[str] Group IDs of each sector, assigned to model.gids . None Returns: Type Description QuadrantGate A QuadrantGate object. Example cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 , labels = [[ 1 , 2 ] [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Gates"},{"location":"gate/#gates","text":"CellEngine API: Gates A Gate is a wrapper around the CellEngine Gate object, with getter and setter methods for writable properties and helper methods. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. When creating gates, all gate types share some required and optional arguments, which are [documented][cellengine.resources.gate.Gate] on the base Gate class. Gate-specific arguments are documented in each gate type. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Gate.","title":"Gates"},{"location":"gate/#gate-abc-and-methods","text":"Although you should not instantiate the Gate class, each gate type will inherit the methods below.","title":"Gate ABC and Methods"},{"location":"gate/#cellengine.resources.gate.Gate","text":"(In all gate types, refer to help for each gate for args specific to that gate.) Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. If you wish you create a tailored gate, you must specify the gid of the global tailored gate. ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . locked: Prevents modification of the gate via the web interface. create_population: Automatically create corresponding population.","title":"Gate"},{"location":"gate/#cellengine.resources.gate.Gate.model","text":"Return an attribute-style dict of the model. NOTE: This approach allows users to change the model properties to invalid values (i.e. 'rectangle' to a str from a dict). We could prevent this by making Gate.model return a slot class \"Model\", where each attr of Model was built dynamically. I wrote it this way at first, but couldn't figure out a way to write both get and set attribute-style accessors for the class. Munch does this really nicely. As it is, this relies on the API to validate the model","title":"model"},{"location":"gate/#cellengine.resources.gate.Gate.create","text":"Build a Gate object from a dict of properties. Parameters: Name Type Description Default experiment_id str The ID of the experiment to which to add the gate. Use when calling this as a static method; not needed when calling from an Experiment object. required name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. If you wish you create a tailored gate, you must specify the gid of the global tailored gate. required parent_population_id str ID of the parent population. Use None for the 'ungated' population. If specified, do not specify parent_population . required parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . required tailored_per_file bool Whether or not this gate is tailored per FCS file. required fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . required fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . required locked bool Prevents modification of the gate via the web interface. required create_population bool Automatically create corresponding population. required","title":"create()"},{"location":"gate/#cellengine.resources.gate.Gate.delete_gates","text":"Deletes a gate or a tailored gate family. Works for compound gates if you specify the top-level gid. Specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted. If gateId is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experimentId str ID of experiment. required _id str ID of gate family. None gateId str ID of gate. required exclude str Gate ID to exclude from deletion. None Example cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None","title":"delete_gates()"},{"location":"gate/#cellengine.resources.gate.Gate.post","text":"Post a gate and update properties.","title":"post()"},{"location":"gate/#cellengine.resources.gate.Gate.update","text":"","title":"update()"},{"location":"gate/#gate-types","text":"","title":"Gate Types"},{"location":"gate/#cellengine.resources.gate.RectangleGate","text":"Basic concrete class for rectangle gates","title":"RectangleGate"},{"location":"gate/#cellengine.resources.gate.RectangleGate.create","text":"Creates a rectangle gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required Returns: Type Description RectangleGate A RectangleGate object. Example experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) # or: cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.5 , x2 = 95.1 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid )","title":"create()"},{"location":"gate/#cellengine.resources.gate.PolygonGate","text":"Basic concrete class for polygon gates","title":"PolygonGate"},{"location":"gate/#cellengine.resources.gate.PolygonGate.create","text":"Creates a polygon gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x_vertices List[float] List of x coordinates for the polygon's vertices. required y_vertices List[float] List of y coordinates for the polygon's vertices. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. [] Returns: Type Description PolygonGate A PolygonGate object. Example experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x_vertices = [ 1 , 2 , 3 ], y_vertices = [ 4 , 5 , 6 ])","title":"create()"},{"location":"gate/#cellengine.resources.gate.EllipseGate","text":"Basic concrete class for ellipse gates","title":"EllipseGate"},{"location":"gate/#cellengine.resources.gate.EllipseGate.create","text":"Creates an ellipse gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. [] Returns: Type Description EllipseGate An EllipseGate object. Example cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 )","title":"create()"},{"location":"gate/#cellengine.resources.gate.RangeGate","text":"Basic concrete class for range gates","title":"RangeGate"},{"location":"gate/#cellengine.resources.gate.RangeGate.create","text":"Creates a range gate. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines, in the 0.5 label List[float] [x, y] position of the label. Defaults to the midpoint of the gate. [] Returns: Type Description RangeGate A RangeGate object. Example experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 )","title":"create()"},{"location":"gate/#cellengine.resources.gate.SplitGate","text":"Basic concrete class for split gates","title":"SplitGate"},{"location":"gate/#cellengine.resources.gate.SplitGate.create","text":"Creates a split gate. Split gates have two sectors (right and left), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). y: The y coordinate of the dashed line extending from the center point (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gids List[str] Group IDs of each sector, assigned to model.gids. None Returns: Type Description SplitGate A SplitGate object. Example cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 )","title":"create()"},{"location":"gate/#cellengine.resources.gate.QuadrantGate","text":"Basic concrete class for quadrant gates","title":"QuadrantGate"},{"location":"gate/#cellengine.resources.gate.QuadrantGate.create","text":"Creates a quadrant gate. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Refer to the [Gate][cellengine.resources.gate.Gate] class for optional args. Parameters: Name Type Description Default x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[float] Positions of the quadrant labels. A list of four length-2 lists in the order: UR, UL, LL, LR. These are set automatically to the plot corners. [] gids List[str] Group IDs of each sector, assigned to model.gids . None Returns: Type Description QuadrantGate A QuadrantGate object. Example cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 , labels = [[ 1 , 2 ] [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]])","title":"create()"},{"location":"gate/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"licenseagreement/","text":"License Agreement","title":"Legal"},{"location":"licenseagreement/#license-agreement","text":"","title":"License Agreement"},{"location":"recipes/","text":"Recipes for common operations","title":"Cookbook"},{"location":"recipes/#recipes-for-common-operations","text":"","title":"Recipes for common operations"}]}