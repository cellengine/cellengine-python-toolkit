{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CellEngine API Toolkit for Python This is the documentation for the Python toolkit for the CellEngine API. For API documentation visit here . Quick Start Install cellengine using pip : pip install cellengine For the development version: pip install git+https://github.com/primitybio/cellengine-python-toolkit.git Authentication import cellengine client = cellengine . APIClient ( username = \"jason\" ) # Password: <enter your password here> # Alternatively, authenticate by setting CELLENGINE_PASSWORD or # CELLENGINE_AUTH_TOKEN in your environment # Get a list of all accessible experiments experiment = client . get_experiments () Get resources All resources have a unique ID stored as _id , e.g. Experiment()._id . Resources can be retrieved by name or by ID: # Get an experiment by its name experiment = client . get_experiment ( name = \"My experiment\" ) experiment = cellengine . Experiment . get ( name = \"My experiment\" ) # or by its ID experiment = client . get_experiment ( \"5f203e852a183003c2459c94\" ) # Get an attachment by name att = experiment . get_attachment ( name = \"my attachment\" ) att = Attachment . get ( experiment . _id , \"my attachment\" ) # or by its ID att = experiment . get_attachment ( \"5f3ac0ba5465db092213cff5\" ) att = client . get_attachment ( experiment . _id , \"5f3ac0ba5465db092213cff5\" ) Create resources experiment . upload_attachment ( \"path/to/my_file.txt\" ) experiment . create_compensation ( \"My comp\" , [ \"Chan1\" , \"Chan2\" , [ 1 , 0.1 , 0 , 1 ]) Update resources att = experiment . get_attachment ( name = \"my_file.txt\" ) att . filename = \"my_new_name.txt\" att . update () # save changes back to CellEngine Operate on resources file1 = experiment . get_fcs_file ( name = \"160311-96plex-4dye\" ) # Get a Pandas dataframe containing an FcsFile's events, subsampled to 10 events events_df = file1 . get_events ( preSubsampleN = 10 ) Delete resources Deleting all resources is final, except for Experiments, Folders and FCS files. Those resources are marked as deleted, then permanently deleted at a later date. To undelete an Experiment, use the .undelete() method. att = experiment . get_attachment ( name = \"my_file.txt\" ) att . delete () experiment . attachments # returns [] More Help GitHub Issues CellEngine API","title":"Home"},{"location":"#cellengine-api-toolkit-for-python","text":"This is the documentation for the Python toolkit for the CellEngine API. For API documentation visit here .","title":"CellEngine API Toolkit for Python"},{"location":"#quick-start","text":"Install cellengine using pip : pip install cellengine For the development version: pip install git+https://github.com/primitybio/cellengine-python-toolkit.git","title":"Quick Start"},{"location":"#authentication","text":"import cellengine client = cellengine . APIClient ( username = \"jason\" ) # Password: <enter your password here> # Alternatively, authenticate by setting CELLENGINE_PASSWORD or # CELLENGINE_AUTH_TOKEN in your environment # Get a list of all accessible experiments experiment = client . get_experiments ()","title":"Authentication"},{"location":"#get-resources","text":"All resources have a unique ID stored as _id , e.g. Experiment()._id . Resources can be retrieved by name or by ID: # Get an experiment by its name experiment = client . get_experiment ( name = \"My experiment\" ) experiment = cellengine . Experiment . get ( name = \"My experiment\" ) # or by its ID experiment = client . get_experiment ( \"5f203e852a183003c2459c94\" ) # Get an attachment by name att = experiment . get_attachment ( name = \"my attachment\" ) att = Attachment . get ( experiment . _id , \"my attachment\" ) # or by its ID att = experiment . get_attachment ( \"5f3ac0ba5465db092213cff5\" ) att = client . get_attachment ( experiment . _id , \"5f3ac0ba5465db092213cff5\" )","title":"Get resources"},{"location":"#create-resources","text":"experiment . upload_attachment ( \"path/to/my_file.txt\" ) experiment . create_compensation ( \"My comp\" , [ \"Chan1\" , \"Chan2\" , [ 1 , 0.1 , 0 , 1 ])","title":"Create resources"},{"location":"#update-resources","text":"att = experiment . get_attachment ( name = \"my_file.txt\" ) att . filename = \"my_new_name.txt\" att . update () # save changes back to CellEngine","title":"Update resources"},{"location":"#operate-on-resources","text":"file1 = experiment . get_fcs_file ( name = \"160311-96plex-4dye\" ) # Get a Pandas dataframe containing an FcsFile's events, subsampled to 10 events events_df = file1 . get_events ( preSubsampleN = 10 )","title":"Operate on resources"},{"location":"#delete-resources","text":"Deleting all resources is final, except for Experiments, Folders and FCS files. Those resources are marked as deleted, then permanently deleted at a later date. To undelete an Experiment, use the .undelete() method. att = experiment . get_attachment ( name = \"my_file.txt\" ) att . delete () experiment . attachments # returns []","title":"Delete resources"},{"location":"#more-help","text":"GitHub Issues CellEngine API","title":"More Help"},{"location":"api_client/","text":"API Client The CellEngine APIClient object is the low-level interface between the CellEngine API and entities in the Python SDK. After authenticating, you may either use the APIClient directly or interact with the higher-level SDK entities. Assuming you have instantiated the APIClient object: import cellengine client = cellengine . APIClient ( \"username\" ) # Password: <enter your password here> # Alternatively, set CELLENGINE_PASSWORD in your environment then the following sequences of commands are equivalent: exp = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcs_file ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = cellengine . FcsFile . get ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = exp . get_fcs_file ( name = \"my fcs file\" ) The APIClient provides higher-level methods for interacting with CellEngine. It also provides _get , _post , _patch , and _delete methods for low-level interaction with the CellEngine API . If there is a higher-level feature that's missing, please feel free to open an Issue in GitHub . Properties base_url (to override the cellengine.com URL, generally for internal use) username password token user_id admin flags authenticated cache_info cache_clear Methods cellengine.utils.api_client.APIClient.APIClient clone_experiment ( self , _id , name = None , as_dict = False ) create_fcs_file ( self , experiment_id , body ) Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. Can be used to import files from other experiments. delete_entity ( self , experiment_id , entity_type , _id ) delete_experiment ( self , _id ) Hard-delete an experiment. Warning: This action is irreversible! delete_gate ( self , experiment_id , _id = None , gid = None , exclude = None ) Deletes a gate or a tailored gate family. Specify the top-level gid when working with compound gates (specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted). If _id is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experiment_id str ID of experiment. required _id str ID of the gate to delete. None gid str ID of gate family to delte. None exclude str Gate ID to exclude from deletion. None Examples: cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None None download_attachment ( self , experiment_id , _id = None , name = None ) Download an attachment download_fcs_file ( self , experiment_id , fcs_file_id , ** kwargs ) Download events for a specific FcsFile Parameters: Name Type Description Default experiment_id str ID of the experiment required fcs_file_id str ID of the FcsFile required kwargs compensatedQ (bool): If true, applies the compensation specified in compensationId to the exported events. For TSV format, the numerical values will be the compensated values. For FCS format, the numerical values will be unchanged, but the file header will contain the compensation as the spill string (file-internal compensation). compensationId (str, optional): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If true, a header row containing the channel names will be included. original (bool): If true, the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {} get_attachment ( self , experiment_id , _id = None , name = None ) get_attachments ( self , experiment_id ) get_compensation ( self , experiment_id , _id = None , name = None , as_dict = False ) get_compensations ( self , experiment_id , as_dict = False ) get_experiment ( self , _id = None , name = None , as_dict = False ) get_experiments ( self , as_dict = False ) get_fcs_file ( self , experiment_id , _id = None , name = None , as_dict = False ) get_fcs_files ( self , experiment_id , as_dict = False ) get_gate ( self , experiment_id , _id , as_dict = False ) Gates cannot be retrieved by name. get_gates ( self , experiment_id , as_dict = False ) get_plot ( self , experiment_id , fcs_file_id , x_channel , y_channel , plot_type , population_id = None , properties = None , raw = False ) get_population ( self , experiment_id , _id = None , name = None , as_dict = False ) get_populations ( self , experiment_id , as_dict = False ) get_scaleset ( self , experiment_id , as_dict = False ) Get a scaleset for an experiment. get_statistics ( self , experiment_id , statistics , channels , q = None , annotations = False , compensation_id = None , fcs_file_ids = None , format = 'json' , layout = None , percent_of = 'PARENT' , population_ids = None ) Request Statistics from CellEngine. Parameters: Name Type Description Default statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations Optional[bool] bool: Include file annotations in output (defaults to False). False compensation_id Optional[str] str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids Optional[List[str]] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format Optional[str] str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional[str] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional[Union[str, List[str]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. 'PARENT' population_ids Optional[List[str]] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe post_attachment ( self , experiment_id , filepath , filename = None ) Upload an attachment Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly-uploaded Attachment post_compensation ( self , experiment_id , compensation = None ) post_experiment ( self , experiment , as_dict = False ) Create a new experiment on CellEngine. post_gate ( self , experiment_id , gate , create_population = True , as_dict = False ) post_population ( self , experiment_id , population ) post_statistics ( self , experiment_id , req_params , raw = True ) tailor_to ( self , experiment_id , gate_id , fcs_file_id ) Tailor a gate to a file. update_entity ( self , experiment_id , _id , entity_type , body ) update_experiment ( self , _id , body ) update_gate_family ( self , experiment_id , gid , body = None ) upload_fcs_file ( self , experiment_id , filepath , filename = None ) Upload an FCS file to CellEngine Parameters: Name Type Description Default filepath str Local path to FCS file. required filename str Optionally, specify a new name for the file. None Returns: Type Description FcsFile The newly-uploaded FcsFile","title":"API Client"},{"location":"api_client/#api-client","text":"The CellEngine APIClient object is the low-level interface between the CellEngine API and entities in the Python SDK. After authenticating, you may either use the APIClient directly or interact with the higher-level SDK entities. Assuming you have instantiated the APIClient object: import cellengine client = cellengine . APIClient ( \"username\" ) # Password: <enter your password here> # Alternatively, set CELLENGINE_PASSWORD in your environment then the following sequences of commands are equivalent: exp = client . get_experiment ( name = \"my experiment\" ) fcsfile = client . get_fcs_file ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = cellengine . FcsFile . get ( experiment_id = exp . _id , name = \"my fcs file\" ) exp = cellengine . Experiment . get ( name = \"my experiment\" ) fcsfile = exp . get_fcs_file ( name = \"my fcs file\" ) The APIClient provides higher-level methods for interacting with CellEngine. It also provides _get , _post , _patch , and _delete methods for low-level interaction with the CellEngine API . If there is a higher-level feature that's missing, please feel free to open an Issue in GitHub .","title":"API Client"},{"location":"api_client/#properties","text":"base_url (to override the cellengine.com URL, generally for internal use) username password token user_id admin flags authenticated cache_info cache_clear","title":"Properties"},{"location":"api_client/#methods","text":"","title":"Methods"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient","text":"","title":"APIClient"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.clone_experiment","text":"","title":"clone_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.create_fcs_file","text":"Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. Can be used to import files from other experiments.","title":"create_fcs_file()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.delete_entity","text":"","title":"delete_entity()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.delete_experiment","text":"Hard-delete an experiment. Warning: This action is irreversible!","title":"delete_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.delete_gate","text":"Deletes a gate or a tailored gate family. Specify the top-level gid when working with compound gates (specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted). If _id is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method from cellengine.Gate or from an Experiment instance. Parameters: Name Type Description Default experiment_id str ID of experiment. required _id str ID of the gate to delete. None gid str ID of gate family to delte. None exclude str Gate ID to exclude from deletion. None Examples: cellengine . Gate . delete_gate ( experiment_id , gid = [ gate family ID ]) # or experiment . delete_gate ( _id = [ gate ID ]) Returns: Type Description None None","title":"delete_gate()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.download_attachment","text":"Download an attachment","title":"download_attachment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.download_fcs_file","text":"Download events for a specific FcsFile Parameters: Name Type Description Default experiment_id str ID of the experiment required fcs_file_id str ID of the FcsFile required kwargs compensatedQ (bool): If true, applies the compensation specified in compensationId to the exported events. For TSV format, the numerical values will be the compensated values. For FCS format, the numerical values will be unchanged, but the file header will contain the compensation as the spill string (file-internal compensation). compensationId (str, optional): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If true, a header row containing the channel names will be included. original (bool): If true, the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {}","title":"download_fcs_file()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_attachment","text":"","title":"get_attachment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_attachments","text":"","title":"get_attachments()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_compensation","text":"","title":"get_compensation()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_compensations","text":"","title":"get_compensations()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_experiment","text":"","title":"get_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_experiments","text":"","title":"get_experiments()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_fcs_file","text":"","title":"get_fcs_file()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_fcs_files","text":"","title":"get_fcs_files()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_gate","text":"Gates cannot be retrieved by name.","title":"get_gate()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_gates","text":"","title":"get_gates()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_plot","text":"","title":"get_plot()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_population","text":"","title":"get_population()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_populations","text":"","title":"get_populations()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_scaleset","text":"Get a scaleset for an experiment.","title":"get_scaleset()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.get_statistics","text":"Request Statistics from CellEngine. Parameters: Name Type Description Default statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations Optional[bool] bool: Include file annotations in output (defaults to False). False compensation_id Optional[str] str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids Optional[List[str]] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format Optional[str] str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout Optional[str] str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Optional[Union[str, List[str]]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. 'PARENT' population_ids Optional[List[str]] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe","title":"get_statistics()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_attachment","text":"Upload an attachment Parameters: Name Type Description Default filepath str Local path to file to upload. required filename str Optionally, specify a new name for the file. None Returns: Type Description Attachment The newly-uploaded Attachment","title":"post_attachment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_compensation","text":"","title":"post_compensation()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_experiment","text":"Create a new experiment on CellEngine.","title":"post_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_gate","text":"","title":"post_gate()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_population","text":"","title":"post_population()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.post_statistics","text":"","title":"post_statistics()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.tailor_to","text":"Tailor a gate to a file.","title":"tailor_to()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.update_entity","text":"","title":"update_entity()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.update_experiment","text":"","title":"update_experiment()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.update_gate_family","text":"","title":"update_gate_family()"},{"location":"api_client/#cellengine.utils.api_client.APIClient.APIClient.upload_fcs_file","text":"Upload an FCS file to CellEngine Parameters: Name Type Description Default filepath str Local path to FCS file. required filename str Optionally, specify a new name for the file. None Returns: Type Description FcsFile The newly-uploaded FcsFile","title":"upload_fcs_file()"},{"location":"attachments/","text":"Attachments CellEngine API: Attachments Attachments are non-data files stored in an experiment. Properties Properties are getter and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented in the CellEngine API unless otherwise noted. Methods cellengine.resources.attachment.Attachment A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment. delete ( self ) Delete this attachment. download ( self , to_file = None ) Download the attachment. Defaults to returning the file as a blob. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Path at which to save the file. Accepts relative or absolute paths. None Returns: Type Description content The raw response content. get ( experiment_id , _id = None , name = None ) classmethod Get an Attachment by name or ID for a specific experiment. Either name or _id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id str ID of the attachment. None name str Name of the experiment. None update ( self ) Save changes to this Attachment to CellEngine. Returns: Type Description None Updates the Attachment on CellEngine and synchronizes the local Attachment object properties with remote state. upload ( experiment_id , filepath , filename = None ) staticmethod","title":"Attachments"},{"location":"attachments/#attachments","text":"CellEngine API: Attachments Attachments are non-data files stored in an experiment.","title":"Attachments"},{"location":"attachments/#properties","text":"Properties are getter and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented in the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"attachments/#methods","text":"","title":"Methods"},{"location":"attachments/#cellengine.resources.attachment.Attachment","text":"A class representing a CellEngine attachment. Attachments are non-data files that are stored in an experiment.","title":"Attachment"},{"location":"attachments/#cellengine.resources.attachment.Attachment.delete","text":"Delete this attachment.","title":"delete()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.download","text":"Download the attachment. Defaults to returning the file as a blob. If to_file is specified, the file will be saved to disk. Parameters: Name Type Description Default to_file str Path at which to save the file. Accepts relative or absolute paths. None Returns: Type Description content The raw response content.","title":"download()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.get","text":"Get an Attachment by name or ID for a specific experiment. Either name or _id must be specified. Parameters: Name Type Description Default experiment_id str ID of the experiment this attachment is connected with. required _id str ID of the attachment. None name str Name of the experiment. None","title":"get()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.update","text":"Save changes to this Attachment to CellEngine. Returns: Type Description None Updates the Attachment on CellEngine and synchronizes the local Attachment object properties with remote state.","title":"update()"},{"location":"attachments/#cellengine.resources.attachment.Attachment.upload","text":"","title":"upload()"},{"location":"compensations/","text":"Compensations CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\" or \"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.compensation.Compensation A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them. dataframe property readonly Get the compensation matrix as a Pandas DataFrame. dataframe_as_html property readonly Return the compensation matrix dataframe as HTML. apply ( self , file , inplace = True , ** params ) Compensates the file's data. Parameters: Name Type Description Default file FcsFile The FCS file to compensate. required inplace bool Compensate the file's data in-place. True params Dict All arguments accepted by FcsFile.events are accepted here. {} Returns: Type Description DataFrame or None if inplace=True , returns nothing. create ( experiment_id , compensation ) classmethod Creates a compensation Parameters: Name Type Description Default experiment_id str ID of experiment that this compensation belongs to. required compensation dict Dict containing channels and spillMatrix properties. required delete ( self ) get ( experiment_id , _id = None , name = None ) classmethod update ( self ) Save changes to this Compensation to CellEngine.","title":"Compensations"},{"location":"compensations/#compensations","text":"CellEngine API: Compensations A compensation is a list of channel names and a corresponding square matrix. The matrix is technically a \"spill\" or \"spillover\" matrix, which is inverted to yield the compensation matrix; most applications refer to the spill matrix as a compensation matrix, however. In the Python SDK, the matrix is represented by a Pandas DataFrame.","title":"Compensations"},{"location":"compensations/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"compensations/#methods","text":"","title":"Methods"},{"location":"compensations/#cellengine.resources.compensation.Compensation","text":"A class representing a CellEngine compensation matrix. Can be applied to FCS files to compensate them.","title":"Compensation"},{"location":"compensations/#cellengine.resources.compensation.Compensation.dataframe","text":"Get the compensation matrix as a Pandas DataFrame.","title":"dataframe"},{"location":"compensations/#cellengine.resources.compensation.Compensation.dataframe_as_html","text":"Return the compensation matrix dataframe as HTML.","title":"dataframe_as_html"},{"location":"compensations/#cellengine.resources.compensation.Compensation.apply","text":"Compensates the file's data. Parameters: Name Type Description Default file FcsFile The FCS file to compensate. required inplace bool Compensate the file's data in-place. True params Dict All arguments accepted by FcsFile.events are accepted here. {} Returns: Type Description DataFrame or None if inplace=True , returns nothing.","title":"apply()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.create","text":"Creates a compensation Parameters: Name Type Description Default experiment_id str ID of experiment that this compensation belongs to. required compensation dict Dict containing channels and spillMatrix properties. required","title":"create()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.delete","text":"","title":"delete()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.get","text":"","title":"get()"},{"location":"compensations/#cellengine.resources.compensation.Compensation.update","text":"Save changes to this Compensation to CellEngine.","title":"update()"},{"location":"contributing/","text":"Contributing If you find an issue, please open an issue in GitHub . We welcome PRs, but encourage opening an issue to discuss changes in advance. We use pytest for testing, and black for code style.","title":"Development"},{"location":"contributing/#contributing","text":"If you find an issue, please open an issue in GitHub . We welcome PRs, but encourage opening an issue to discuss changes in advance. We use pytest for testing, and black for code style.","title":"Contributing"},{"location":"experiments/","text":"Experiments CellEngine API: Experiments An Experiment is the primary unit of organization in CellEngine and contains FCS files, gates, populations, etc. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment . Most methods available from the APIClient are available on an Experiment , with the first param experiment_id implicitly passed as the current experiment's ID. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.experiment.Experiment active_compensation : Compensation property writable attachments : List [ Attachment ] property readonly List all attachments on the experiment. compensations : List [ Compensation ] property readonly List all compensations on the experiment. delete property readonly Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered. fcs_files : List [ FcsFile ] property readonly List all FCS files on the experiment. gates : List [ Gate ] property readonly List all gates on the experiment. populations : List [ Population ] property readonly List all populations in the experiment. scalesets : List [ ScaleSet ] property readonly List all scalesets in the experiment. undelete property readonly Clear a scheduled deletion. clone ( self , name = None ) Saves a deep copy of the experiment and all of its resources, including attachments, FCS files, gates and populations. Parameters: Name Type Description Default name str The name to give the new experiment. Defaults to \"[Original Experiment]-1\" None Returns: Type Description Experiment A deep copy of the experiment. create ( name = None , comments = None , uploader = None , primary_researcher = None , tags = None ) staticmethod Post a new experiment to CellEngine. Parameters: Name Type Description Default name str Defaults to \"Untitled Experiment\". None comments str Defaults to None. None uploader str Defaults to user making request. None primary_researcher str Defaults to user making request. None tags List[str] Defaults to empty list. None Returns: Type Description Experiment Creates the Experiment in CellEngine and returns it. create_compensation ( self , name , channels , spill_matrix ) Create a new compensation to this experiment Parameters: Name Type Description Default name str The name of the compensation. required channels List[str] The names of the channels to which this compensation matrix applies. required spill_matrix List[float] The row-wise, square spillover matrix. The length of the array must be the number of channels squared. required create_ellipse_gate ( self , x_channel , y_channel , name , x , y , angle , major , minor , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Formats an ellipse gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. fcs_file_id (str, optional): ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . False fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description EllipseGate EllipseGate: An EllipseGate object. Examples: cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) create_gates ( self , gates ) Save a collection of gate objects. create_polygon_gate ( self , x_channel , y_channel , name , vertices , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Formats a polygon gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required vertices List[float] List of coordinates, like [[x,y], [x,y], ...] required label List[str] Position of the label. Defaults to the midpoint of the gate. [] name str The name of the gate required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description PolygonGate A PolygonGate object. Examples: experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , vertices = [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]]) create_population ( self , population ) Create a complex population Parameters: Name Type Description Default population Dict The population to create. Use the ComplexPopulationBuilder to construct a complex population. required Examples: experiment . create_population ({ \"name\" : name , \"terminalGateGid\" : GID , \"parentId\" : parent . _id , \"gates\" : json . dumps ({ \"$and\" : AND_GATES }) }) Returns: Type Description Population The new population. create_quadrant_gate ( self , x_channel , y_channel , name , x , y , labels = [], skewable = False , angles = [ 0 , 1.5707963267948966 , 3.141592653589793 , 4.71238898038469 ], gid = None , gids = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Formats a quadrant gate for posting to the CellEngine API. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[str] Positions of the quadrant labels. A list of four length-2 vectors in the order: UR, UL, LL, LR. These are set automatically to the plot corners. [] skewable bool Whether the quadrant gate is skewable. False angles List[float] List of the four angles of the quadrant demarcations [0, 1.5707963267948966, 3.141592653589793, 4.71238898038469] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description QuadrantGate A QuadrantGate object. Examples: cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) create_range_gate ( self , x_channel , name , x1 , x2 , y = 0.5 , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Formats a range gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines 0.5 label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RangeGate A RangeGate object. Examples: experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 ) create_rectangle_gate ( self , x_channel , y_channel , name , x1 , x2 , y1 , y2 , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Formats a rectangle gate for posting to the CellEngine API. Parameters: Name Type Description Default name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RectangleGate A RectangleGate object. Examples: experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid ) create_split_gate ( self , x_channel , name , x , y = 0.5 , labels = [], gid = None , gids = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) Formats a split gate for posting to the CellEngine API. Split gates have two sectors (right and left), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate. required x str The x coordinate of the center point (after the channel's scale has been applied). required y float The relative position from 0 to 1 of the dashed line extending from the center point. 0.5 labels List[str] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description SplitGate A SplitGate object. Examples: cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) delete_gate ( self , _id = None , gid = None , exclude = None ) Delete a gate or gate family. See the APIClient for more information. download_attachment ( self , _id = None , name = None ) Get a specific attachment. get ( _id = None , name = None ) staticmethod get_attachment ( self , _id = None , name = None ) get_compensation ( self , _id = None , name = None ) Get a specific compensation. get_fcs_file ( self , _id = None , name = None ) Get a specific FCS file. get_gate ( self , _id = None , name = None ) Get a specific gate. get_population ( self , _id = None , name = None ) Get a specific population. get_scaleset ( self , _id = None , name = None ) Get a specific scaleset. get_statistics ( self , statistics , channels , q = None , annotations = False , compensation_id = None , fcs_file_ids = None , format = 'json' , layout = None , percent_of = None , population_ids = None ) Request Statistics from CellEngine. Parameters: Name Type Description Default statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations bool bool: Include file annotations in output (defaults to False). False compensation_id str str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids List[str] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format str str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout str str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Union[str, List[str]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. None population_ids List[str] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe update ( self ) Save changes to this Experiment to CellEngine. upload_attachment ( self , filepath , filename = None ) Upload an attachment to this experiment. upload_fcs_file ( self , filepath , filename = None ) Upload an FCS file to this experiment.","title":"Experiments"},{"location":"experiments/#experiments","text":"CellEngine API: Experiments An Experiment is the primary unit of organization in CellEngine and contains FCS files, gates, populations, etc. For a list of accessible properties, see Properties . Methods are available for common access and transformations on the Experiment . Most methods available from the APIClient are available on an Experiment , with the first param experiment_id implicitly passed as the current experiment's ID.","title":"Experiments"},{"location":"experiments/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"experiments/#methods","text":"","title":"Methods"},{"location":"experiments/#cellengine.resources.experiment.Experiment","text":"","title":"Experiment"},{"location":"experiments/#cellengine.resources.experiment.Experiment.active_compensation","text":"","title":"active_compensation"},{"location":"experiments/#cellengine.resources.experiment.Experiment.attachments","text":"List all attachments on the experiment.","title":"attachments"},{"location":"experiments/#cellengine.resources.experiment.Experiment.compensations","text":"List all compensations on the experiment.","title":"compensations"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete","text":"Marks the experiment as deleted. Deleted experiments are permanently deleted after approximately 7 days. Until then, deleted experiments can be recovered.","title":"delete"},{"location":"experiments/#cellengine.resources.experiment.Experiment.fcs_files","text":"List all FCS files on the experiment.","title":"fcs_files"},{"location":"experiments/#cellengine.resources.experiment.Experiment.gates","text":"List all gates on the experiment.","title":"gates"},{"location":"experiments/#cellengine.resources.experiment.Experiment.populations","text":"List all populations in the experiment.","title":"populations"},{"location":"experiments/#cellengine.resources.experiment.Experiment.scalesets","text":"List all scalesets in the experiment.","title":"scalesets"},{"location":"experiments/#cellengine.resources.experiment.Experiment.undelete","text":"Clear a scheduled deletion.","title":"undelete"},{"location":"experiments/#cellengine.resources.experiment.Experiment.clone","text":"Saves a deep copy of the experiment and all of its resources, including attachments, FCS files, gates and populations. Parameters: Name Type Description Default name str The name to give the new experiment. Defaults to \"[Original Experiment]-1\" None Returns: Type Description Experiment A deep copy of the experiment.","title":"clone()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create","text":"Post a new experiment to CellEngine. Parameters: Name Type Description Default name str Defaults to \"Untitled Experiment\". None comments str Defaults to None. None uploader str Defaults to user making request. None primary_researcher str Defaults to user making request. None tags List[str] Defaults to empty list. None Returns: Type Description Experiment Creates the Experiment in CellEngine and returns it.","title":"create()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_compensation","text":"Create a new compensation to this experiment Parameters: Name Type Description Default name str The name of the compensation. required channels List[str] The names of the channels to which this compensation matrix applies. required spill_matrix List[float] The row-wise, square spillover matrix. The length of the array must be the number of channels squared. required","title":"create_compensation()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_ellipse_gate","text":"Formats an ellipse gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. fcs_file_id (str, optional): ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . False fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description EllipseGate EllipseGate: An EllipseGate object. Examples: cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 )","title":"create_ellipse_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_gates","text":"Save a collection of gate objects.","title":"create_gates()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_polygon_gate","text":"Formats a polygon gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required vertices List[float] List of coordinates, like [[x,y], [x,y], ...] required label List[str] Position of the label. Defaults to the midpoint of the gate. [] name str The name of the gate required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description PolygonGate A PolygonGate object. Examples: experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , vertices = [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]])","title":"create_polygon_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_population","text":"Create a complex population Parameters: Name Type Description Default population Dict The population to create. Use the ComplexPopulationBuilder to construct a complex population. required Examples: experiment . create_population ({ \"name\" : name , \"terminalGateGid\" : GID , \"parentId\" : parent . _id , \"gates\" : json . dumps ({ \"$and\" : AND_GATES }) }) Returns: Type Description Population The new population.","title":"create_population()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_quadrant_gate","text":"Formats a quadrant gate for posting to the CellEngine API. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[str] Positions of the quadrant labels. A list of four length-2 vectors in the order: UR, UL, LL, LR. These are set automatically to the plot corners. [] skewable bool Whether the quadrant gate is skewable. False angles List[float] List of the four angles of the quadrant demarcations [0, 1.5707963267948966, 3.141592653589793, 4.71238898038469] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description QuadrantGate A QuadrantGate object. Examples: cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 )","title":"create_quadrant_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_range_gate","text":"Formats a range gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines 0.5 label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RangeGate A RangeGate object. Examples: experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 )","title":"create_range_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_rectangle_gate","text":"Formats a rectangle gate for posting to the CellEngine API. Parameters: Name Type Description Default name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RectangleGate A RectangleGate object. Examples: experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid )","title":"create_rectangle_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.create_split_gate","text":"Formats a split gate for posting to the CellEngine API. Split gates have two sectors (right and left), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate. required x str The x coordinate of the center point (after the channel's scale has been applied). required y float The relative position from 0 to 1 of the dashed line extending from the center point. 0.5 labels List[str] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description SplitGate A SplitGate object. Examples: cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 )","title":"create_split_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.delete_gate","text":"Delete a gate or gate family. See the APIClient for more information.","title":"delete_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.download_attachment","text":"Get a specific attachment.","title":"download_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get","text":"","title":"get()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_attachment","text":"","title":"get_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_compensation","text":"Get a specific compensation.","title":"get_compensation()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_fcs_file","text":"Get a specific FCS file.","title":"get_fcs_file()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_gate","text":"Get a specific gate.","title":"get_gate()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_population","text":"Get a specific population.","title":"get_population()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_scaleset","text":"Get a specific scaleset.","title":"get_scaleset()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.get_statistics","text":"Request Statistics from CellEngine. Parameters: Name Type Description Default statistics Union[str, List[str]] Statistical method to request. Any of \"mean\", \"median\", \"quantile\", \"mad\" (median absolute deviation), \"geometricmean\", \"eventcount\", \"cv\", \"stddev\" or \"percent\" (case-insensitive). required q float int: quantile (required for \"quantile\" statistic) None channels List[str] str or List[str]: for \"mean\", \"median\", \"geometricMean\", \"cv\", \"stddev\", \"mad\" or \"quantile\" statistics. Names of channels to calculate statistics for. required annotations bool bool: Include file annotations in output (defaults to False). False compensation_id str str: Compensation to use for gating and statistic calculation. Defaults to uncompensated. Three special constants may be used: 0: Uncompensated -1: File-Internal Compensation Uses the file's internal compensation matrix, if available. If not, an error will be returned. -2: Per-File Compensation Use the compensation assigned to each individual FCS file. None fcs_file_ids List[str] List[str]: FCS files to get statistics for. If omitted, statistics for all non-control FCS files will be returned. None format str str: One of \"TSV (with[out] header)\", \"CSV (with[out] header)\" or \"json\" (default), \"pandas\", case-insensitive. 'json' layout str str: The file (TSV/CSV) or object (JSON) layout. One of \"tall-skinny\", \"medium\", or \"short-wide\". None percent_of Union[str, List[str]] str or List[str]: Population ID or array of population IDs. If omitted or the string \"PARENT\", will calculate percent of parent for each population. If a single ID, will calculate percent of that population for all populations specified by population_ids. If a list, will calculate percent of each of those populations. None population_ids List[str] List[str]: List of population IDs. Defaults to ungated. None Returns: Type Description statistics Dict, String, or pandas.Dataframe","title":"get_statistics()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.update","text":"Save changes to this Experiment to CellEngine.","title":"update()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.upload_attachment","text":"Upload an attachment to this experiment.","title":"upload_attachment()"},{"location":"experiments/#cellengine.resources.experiment.Experiment.upload_fcs_file","text":"Upload an FCS file to this experiment.","title":"upload_fcs_file()"},{"location":"fcs_files/","text":"FcsFiles CellEngine API: Fcs Files FCS files are the standard data representation for flow cytometry. In CellEngine, an FcsFile resource represents the file itself, along with metadata such as the panel and annotations. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.fcs_file.FcsFile events property writable A DataFrame containing this file's data. This is fetched from the server on-demand the first time that this property is accessed. To fetch a file with specific parameters (e.g. subsampling, or gated to a specific population) see FcsFile.get_events() . create ( experiment_id , fcs_files , filename = None , add_file_number = False , add_event_number = False , pre_subsample_n = None , pre_subsample_p = None , seed = None ) classmethod Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. This endpoint can be used to import files from other experiments. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required fcs_files List[str] ID of file or list of IDs of files or objects to process. If more than one file is provided, they will be concatenated in order. To import files from other experiments, pass a list of dicts with _id and experimentId properties. required filename str Rename the uploaded file. None add_file_number bool If concatenating files, adds a file number channel to the resulting file. False add_event_number bool Add an event number column to the exported file. This number corresponds to the index of the event in the original file; when concatenating files, the same event number will appear more than once. False pre_subsample_n int Randomly subsample the file to contain this many events. None pre_subsample_p float Randomly subsample the file to contain this percent of events (0 to 1). None seed int Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. None Returns: Type Description FcsFile FcsFile delete ( self ) get ( experiment_id , _id = None , name = None ) classmethod get_events ( self , ** kwargs ) Fetch a DataFrame containing this file's data. Parameters: Name Type Description Default **kwargs compensatedQ (bool): If true, applies the compensation specified in compensationId to the exported events. For TSV format, the numerical values will be the compensated values. For FCS format, the numerical values will be unchanged, but the file header will contain the compensation as the spill string (file-internal compensation). compensationId ([int, str]): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If true, a header row containing the channel names will be included. original (bool): If true, the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {} Returns: None; updates the self.events property. plot ( self , x_channel , y_channel , plot_type , z_channel = None , population_id = None , ** kwargs ) Buid a plot for an FcsFile. See Plot.get for more information. update ( self ) Save changes to this FcsFile to CellEngine. upload ( experiment_id , filepath ) classmethod Uploads a file. The maximum file size is approximately 2.3 GB. Contact us if you need to work with larger files. Automatically parses panels and annotations and updates ScaleSets to include all channels in the file. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required filepath str The file contents. required","title":"FcsFiles"},{"location":"fcs_files/#fcsfiles","text":"CellEngine API: Fcs Files FCS files are the standard data representation for flow cytometry. In CellEngine, an FcsFile resource represents the file itself, along with metadata such as the panel and annotations.","title":"FcsFiles"},{"location":"fcs_files/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"fcs_files/#methods","text":"","title":"Methods"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile","text":"","title":"FcsFile"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.events","text":"A DataFrame containing this file's data. This is fetched from the server on-demand the first time that this property is accessed. To fetch a file with specific parameters (e.g. subsampling, or gated to a specific population) see FcsFile.get_events() .","title":"events"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.create","text":"Creates an FCS file by copying, concatenating and/or subsampling existing file(s) from this or other experiments. This endpoint can be used to import files from other experiments. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required fcs_files List[str] ID of file or list of IDs of files or objects to process. If more than one file is provided, they will be concatenated in order. To import files from other experiments, pass a list of dicts with _id and experimentId properties. required filename str Rename the uploaded file. None add_file_number bool If concatenating files, adds a file number channel to the resulting file. False add_event_number bool Add an event number column to the exported file. This number corresponds to the index of the event in the original file; when concatenating files, the same event number will appear more than once. False pre_subsample_n int Randomly subsample the file to contain this many events. None pre_subsample_p float Randomly subsample the file to contain this percent of events (0 to 1). None seed int Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. None Returns: Type Description FcsFile FcsFile","title":"create()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.delete","text":"","title":"delete()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.get","text":"","title":"get()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.get_events","text":"Fetch a DataFrame containing this file's data. Parameters: Name Type Description Default **kwargs compensatedQ (bool): If true, applies the compensation specified in compensationId to the exported events. For TSV format, the numerical values will be the compensated values. For FCS format, the numerical values will be unchanged, but the file header will contain the compensation as the spill string (file-internal compensation). compensationId ([int, str]): Required if populationId is specified. Compensation to use for gating. headers (bool): For TSV format only. If true, a header row containing the channel names will be included. original (bool): If true, the returned file will be byte-for-byte identical to the originally uploaded file. If false or unspecified (and compensatedQ is false, populationId is unspecified and all subsampling parameters are unspecified), the returned file will contain essentially the same data as the originally uploaded file, but may not be byte-for-byte identical. For example, the byte ordering of the DATA segment will always be little-endian and any extraneous information appended to the end of the original file will be stripped. This parameter takes precedence over compensatedQ, populationId and the subsampling parameters. populationId (str): If provided, only events from this population will be included in the output file. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. seed: (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. addEventNumber (bool): Add an event number column to the exported file. When a populationId is specified (when gating), this number corresponds to the index of the event in the original file. {} Returns: None; updates the self.events property.","title":"get_events()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.plot","text":"Buid a plot for an FcsFile. See Plot.get for more information.","title":"plot()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.update","text":"Save changes to this FcsFile to CellEngine.","title":"update()"},{"location":"fcs_files/#cellengine.resources.fcs_file.FcsFile.upload","text":"Uploads a file. The maximum file size is approximately 2.3 GB. Contact us if you need to work with larger files. Automatically parses panels and annotations and updates ScaleSets to include all channels in the file. Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs required filepath str The file contents. required","title":"upload()"},{"location":"gates/","text":"Gates CellEngine API: Gates Gates are geometric shapes that define boundaries within which events (cells) must be contained to be considered part of a population. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. All gate types share some required and optional arguments, which are documented on the base Gate class. Gate-specific arguments are documented in each gate type. Properties Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Gate ABC and Methods Although you should not instantiate the Gate class, each gate type will inherit the methods below. cellengine.resources.gate.Gate delete ( self ) delete_gates ( experiment_id , _id = None , gid = None , exclude = None ) staticmethod Deletes a gate or a tailored gate family. Specify the top-level gid when working with compound gates (specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted). If _id is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method on cellengine.Gate or on an Experiment instance. Parameters: Name Type Description Default experiment_id str ID of experiment. required _id str ID of gate. None gid str ID of gate family. None exclude str Gate ID to exclude from deletion. None Examples: cellengine . Gate . delete_gates ( experiment_id , gid = < gate family ID > ) # or experiment . delete_gates ( _id = < gate ID > ) # or experiment . delete_gates ( gid = < gate family ID > , exclude = < gate ID > ) Returns: Type Description None None get ( experiment_id , _id = None , name = None ) classmethod Get a specific gate. post ( self ) update ( self ) Save changes to this Gate to CellEngine. Gate Types cellengine.resources.gate.RectangleGate Basic concrete class for Rectangle gates create ( experiment_id , x_channel , y_channel , name , x1 , x2 , y1 , y2 , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) classmethod Formats a rectangle gate for posting to the CellEngine API. Parameters: Name Type Description Default name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RectangleGate A RectangleGate object. Examples: experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid ) cellengine.resources.gate.PolygonGate Basic concrete class for polygon gates create ( experiment_id , x_channel , y_channel , name , vertices , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) classmethod Formats a polygon gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required vertices List[float] List of coordinates, like [[x,y], [x,y], ...] required label List Position of the label. Defaults to the midpoint of the gate. [] name str The name of the gate required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description PolygonGate A PolygonGate object. Examples: experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , vertices = [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]]) cellengine.resources.gate.EllipseGate Basic concrete class for ellipse gates create ( experiment_id , x_channel , y_channel , name , x , y , angle , major , minor , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) classmethod Formats an ellipse gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. fcs_file_id (str, optional): ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . False fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description EllipseGate EllipseGate: An EllipseGate object. Examples: cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) cellengine.resources.gate.RangeGate Basic concrete class for range gates create ( experiment_id , x_channel , name , x1 , x2 , y = 0.5 , label = [], gid = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) classmethod Formats a range gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines 0.5 label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RangeGate A RangeGate object. Examples: experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 ) cellengine.resources.gate.SplitGate Basic concrete class for split gates create ( experiment_id , x_channel , name , x , y = 0.5 , labels = [], gid = None , gids = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) classmethod Formats a split gate for posting to the CellEngine API. Split gates have two sectors (right and left), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate. required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The relative position from 0 to 1 of the dashed line extending from the center point. 0.5 labels List[str] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description SplitGate A SplitGate object. Examples: cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) cellengine.resources.gate.QuadrantGate Basic concrete class for quadrant gates create ( experiment_id , x_channel , y_channel , name , x , y , labels = [], skewable = False , angles = [ 0 , 1.5707963267948966 , 3.141592653589793 , 4.71238898038469 ], gid = None , gids = None , locked = False , parent_population_id = None , parent_population = None , tailored_per_file = False , fcs_file_id = None , fcs_file = None , create_population = True ) classmethod Formats a quadrant gate for posting to the CellEngine API. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[str] Positions of the quadrant labels. A list of four length-2 vectors in the order: UR, UL, LL, LR. These are set automatically to the plot corners. [] skewable bool Whether the quadrant gate is skewable. False angles List[float] List of the four angles of the quadrant demarcations [0, 1.5707963267948966, 3.141592653589793, 4.71238898038469] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description QuadrantGate A QuadrantGate object. Examples: cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) Gate Models Gates have a model property, which is a nested dict object. For convenience, the model property has dot-indexing for getting and setting properties. For instance: > gate = experiment . gates [ 0 ] > gate . model Munch ({ 'polygon' : Munch ({ 'vertices' : [ [ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ] ]}), 'locked' : False , 'label' : [ 7.62844 , 6.19701 ] }) > gate . model . polygon . vertices [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]] You can set the values of these properties. You must explicitly call the update method for these changes to be saved to CellEngine. > gate . model . locked True > gate . model . locked = False > gate . update () > gate . model . locked False You may set invalid values, but update will fail with an API error: > gate . model . locked = \"orange\" > gate . model . locked \"orange\" > gate . update () APIError : CellEngine API : status code 400 != 200 for URL https : // cellengine . com / api / v1 / experiments /.../ gates /... -- \"locked\" must be a Boolean . Creating Gates Gates may be created singly or in bulk. Create a single new gate using kwargs: # using a method on Experiment exp . create_ellipse_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) # using a classmethod from cellengine import EllipseGate gate = EllipseGate . create ( experiment_id = exp . _id , # the same kwargs ) gate . post () Post gates in bulk When creating many gates, build the gates in a list, then save them in bulk to CellEngine. For instance: gates = [] gates . append ( EllipseGate . create ( experiment_id = exp . _id , # args, kwargs ) ) gates . append ( RectangleGate . create ( experiment_id = exp . _id , # args, kwargs ) ) Gate . bulk_create ( gates ) # returns [EllipseGate(...), RectangleGate(...)]","title":"Gates"},{"location":"gates/#gates","text":"CellEngine API: Gates Gates are geometric shapes that define boundaries within which events (cells) must be contained to be considered part of a population. Each gate type has its own implementation of the abstract Gate class. Do not instantiate the base Gate class directly. All gate types share some required and optional arguments, which are documented on the base Gate class. Gate-specific arguments are documented in each gate type.","title":"Gates"},{"location":"gates/#properties","text":"Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"gates/#gate-abc-and-methods","text":"Although you should not instantiate the Gate class, each gate type will inherit the methods below.","title":"Gate ABC and Methods"},{"location":"gates/#cellengine.resources.gate.Gate","text":"","title":"Gate"},{"location":"gates/#cellengine.resources.gate.Gate.delete","text":"","title":"delete()"},{"location":"gates/#cellengine.resources.gate.Gate.delete_gates","text":"Deletes a gate or a tailored gate family. Specify the top-level gid when working with compound gates (specifying the gid of a sector (i.e. one listed in model.gids ) will result in no gates being deleted). If _id is specified, only that gate will be deleted, regardless of the other parameters specified. May be called as a static method on cellengine.Gate or on an Experiment instance. Parameters: Name Type Description Default experiment_id str ID of experiment. required _id str ID of gate. None gid str ID of gate family. None exclude str Gate ID to exclude from deletion. None Examples: cellengine . Gate . delete_gates ( experiment_id , gid = < gate family ID > ) # or experiment . delete_gates ( _id = < gate ID > ) # or experiment . delete_gates ( gid = < gate family ID > , exclude = < gate ID > ) Returns: Type Description None None","title":"delete_gates()"},{"location":"gates/#cellengine.resources.gate.Gate.get","text":"Get a specific gate.","title":"get()"},{"location":"gates/#cellengine.resources.gate.Gate.post","text":"","title":"post()"},{"location":"gates/#cellengine.resources.gate.Gate.update","text":"Save changes to this Gate to CellEngine.","title":"update()"},{"location":"gates/#gate-types","text":"","title":"Gate Types"},{"location":"gates/#cellengine.resources.gate.RectangleGate","text":"Basic concrete class for Rectangle gates","title":"RectangleGate"},{"location":"gates/#cellengine.resources.gate.RectangleGate.create","text":"Formats a rectangle gate for posting to the CellEngine API. Parameters: Name Type Description Default name str The name of the gate required x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y1 float The first y coordinate (after the channel's scale has been applied). required y2 float The second y coordinate (after the channel's scale has been applied). required label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RectangleGate A RectangleGate object. Examples: experiment . create_rectangle_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , 12.502 , 95.102 , 1020 , 32021.2 ) cellengine . Gate . create_rectangle_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 , y1 = 1020 , y2 = 32021.2 , gid = global_gate . gid )","title":"create()"},{"location":"gates/#cellengine.resources.gate.PolygonGate","text":"Basic concrete class for polygon gates","title":"PolygonGate"},{"location":"gates/#cellengine.resources.gate.PolygonGate.create","text":"Formats a polygon gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required vertices List[float] List of coordinates, like [[x,y], [x,y], ...] required label List Position of the label. Defaults to the midpoint of the gate. [] name str The name of the gate required gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description PolygonGate A PolygonGate object. Examples: experiment . create_polygon_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , vertices = [[ 1 , 4 ], [ 2 , 5 ], [ 3 , 6 ]])","title":"create()"},{"location":"gates/#cellengine.resources.gate.EllipseGate","text":"Basic concrete class for ellipse gates","title":"EllipseGate"},{"location":"gates/#cellengine.resources.gate.EllipseGate.create","text":"Formats an ellipse gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x centerpoint of the gate. required y float The y centerpoint of the gate. required angle float The angle of the ellipse in radians. required major float The major radius of the ellipse. required minor float The minor radius of the ellipse. required label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. fcs_file_id (str, optional): ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . False fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description EllipseGate EllipseGate: An EllipseGate object. Examples: cellengine . Gate . create_ellipse_gate ( experiment_id , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 )","title":"create()"},{"location":"gates/#cellengine.resources.gate.RangeGate","text":"Basic concrete class for range gates","title":"RangeGate"},{"location":"gates/#cellengine.resources.gate.RangeGate.create","text":"Formats a range gate for posting to the CellEngine API. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate required x1 float The first x coordinate (after the channel's scale has been applied). required x2 float The second x coordinate (after the channel's scale has been applied). required y float Position of the horizontal line between the vertical lines 0.5 label List[str] Position of the label. Defaults to the midpoint of the gate. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description RangeGate A RangeGate object. Examples: experiment . create_range_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x1 = 12.502 , x2 = 95.102 ) cellengine . Gate . create_range_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , 12.502 , 95.102 )","title":"create()"},{"location":"gates/#cellengine.resources.gate.SplitGate","text":"Basic concrete class for split gates","title":"SplitGate"},{"location":"gates/#cellengine.resources.gate.SplitGate.create","text":"Formats a split gate for posting to the CellEngine API. Split gates have two sectors (right and left), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required name str The name of the gate. required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The relative position from 0 to 1 of the dashed line extending from the center point. 0.5 labels List[str] Positions of the quadrant labels. A list of two length-2 lists in the order: L, R. These are set automatically to the top corners. [] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids. None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description SplitGate A SplitGate object. Examples: cellengine . Gate . create_split_gate ( experiment_id , x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 ) experiment . create_split_gate ( x_channel = \"FSC-A\" , name = \"my gate\" , x = 144000 , y = 100000 )","title":"create()"},{"location":"gates/#cellengine.resources.gate.QuadrantGate","text":"Basic concrete class for quadrant gates","title":"QuadrantGate"},{"location":"gates/#cellengine.resources.gate.QuadrantGate.create","text":"Formats a quadrant gate for posting to the CellEngine API. Quadrant gates have four sectors (upper-right, upper-left, lower-left, lower-right), each with a unique gid and name. Parameters: Name Type Description Default x_channel str The name of the x channel to which the gate applies. required y_channel str The name of the y channel to which the gate applies. required name str The name of the gate required x float The x coordinate of the center point (after the channel's scale has been applied). required y float The y coordinate (after the channel's scale has been applied). required labels List[str] Positions of the quadrant labels. A list of four length-2 vectors in the order: UR, UL, LL, LR. These are set automatically to the plot corners. [] skewable bool Whether the quadrant gate is skewable. False angles List[float] List of the four angles of the quadrant demarcations [0, 1.5707963267948966, 3.141592653589793, 4.71238898038469] gid str Group ID of the gate, used for tailoring. If this is not specified, then a new Group ID will be created. To create a tailored gate, the gid of the global tailored gate must be specified. None gids List[str] Group IDs of each sector, assigned to model.gids . None locked bool Prevents modification of the gate via the web interface. False parent_population_id str ID of the parent population. Use None for the \"ungated\" population. If specified, do not specify parent_population . None parent_population str Name of the parent population. An attempt will be made to find the population by name. If zero or more than one population exists with the name, an error will be thrown. If specified, do not specify parent_population_id . None tailored_per_file bool Whether or not this gate is tailored per FCS file. False fcs_file_id str ID of FCS file, if tailored per file. Use None for the global gate in a tailored gate group. If specified, do not specify fcs_file . None fcs_file str Name of FCS file, if tailored per file. An attempt will be made to find the file by name. If zero or more than one file exists with the name, an error will be thrown. Looking up files by name is slower than using the ID, as this requires additional requests to the server. If specified, do not specify fcs_file_id . None create_population bool Automatically create corresponding population. True Returns: Type Description QuadrantGate A QuadrantGate object. Examples: cellengine . Gate . create_quadrant_gate ( experimentId , x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 ) experiment . create_quadrant_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 160000 , y = 200000 )","title":"create()"},{"location":"gates/#gate-models","text":"Gates have a model property, which is a nested dict object. For convenience, the model property has dot-indexing for getting and setting properties. For instance: > gate = experiment . gates [ 0 ] > gate . model Munch ({ 'polygon' : Munch ({ 'vertices' : [ [ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ] ]}), 'locked' : False , 'label' : [ 7.62844 , 6.19701 ] }) > gate . model . polygon . vertices [[ 4.68957 , 2.90929 ], [ 5.23152 , 5.77464 ], [ 7.76064 , 5.956 ], [ 8.59164 , 4.65026 ], [ 6.71287 , 2.32896 ]] You can set the values of these properties. You must explicitly call the update method for these changes to be saved to CellEngine. > gate . model . locked True > gate . model . locked = False > gate . update () > gate . model . locked False You may set invalid values, but update will fail with an API error: > gate . model . locked = \"orange\" > gate . model . locked \"orange\" > gate . update () APIError : CellEngine API : status code 400 != 200 for URL https : // cellengine . com / api / v1 / experiments /.../ gates /... -- \"locked\" must be a Boolean .","title":"Gate Models"},{"location":"gates/#creating-gates","text":"Gates may be created singly or in bulk.","title":"Creating Gates"},{"location":"gates/#create-a-single-new-gate-using-kwargs","text":"# using a method on Experiment exp . create_ellipse_gate ( x_channel = \"FSC-A\" , y_channel = \"FSC-W\" , name = \"my gate\" , x = 260000 , y = 64000 , angle = 0 , major = 120000 , minor = 70000 ) # using a classmethod from cellengine import EllipseGate gate = EllipseGate . create ( experiment_id = exp . _id , # the same kwargs ) gate . post ()","title":"Create a single new gate using kwargs:"},{"location":"gates/#post-gates-in-bulk","text":"When creating many gates, build the gates in a list, then save them in bulk to CellEngine. For instance: gates = [] gates . append ( EllipseGate . create ( experiment_id = exp . _id , # args, kwargs ) ) gates . append ( RectangleGate . create ( experiment_id = exp . _id , # args, kwargs ) ) Gate . bulk_create ( gates ) # returns [EllipseGate(...), RectangleGate(...)]","title":"Post gates in bulk"},{"location":"plots/","text":"Plots CellEngine API: Plots A Plot is an image representing of cytometry data. Properties The Python SDK Plot only has display , get , and save methods. In the case of Plot , properties refers to an optional dictionary of configuration arguments to pass to the get method. Options are detailed above. Methods cellengine.resources.plot.Plot A class representing a CellEngine plot. display ( self ) get ( experiment_id , fcs_file_id , plot_type , x_channel , y_channel , z_channel = None , population_id = None , as_dict = False , ** kwargs ) classmethod Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs. required fcs_file_id str ID of file for which to build a plot. required plot_type str \"contour\", \"dot\", \"density\" or \"histogram\" (case-insensitive) required x_channel str X channel name. required y_channel str (for 2D plots) Y channel name. required z_channel str (for dot plots colored by a 3rd channel) Color channel name. None population_id str Defaults to ungated. None **kwargs Dict axesQ (bool): Display axes lines. Defaults to true. axisLabelsQ (bool): Display axis labels. Defaults to true. compensation (ID): Compensation to use for gating and display. color (str): Case-insensitive string in the format #rgb, #rgba, #rrggbb or #rrggbbaa. The foreground color, i.e. color of curve in \"histogram\" plots and dots in \"dot\" plots. gateLabel (str): One of \"eventcount\", \"mean\", \"median\", \"percent\", \"mad\", \"cv\", \"stddev\", \"geometricmean\", \"name\", \"none\". gateLabelFontSize (float): Font size for gate labels. height (int): Image height. Defaults to 228. percentileStart (float): For contour plots, the percentile of the first contour. percentileStep (float): For contour plots, the percentile step between each contour. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. renderGates (bool): Render gates into the image. seed (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. smoothing (float): For density and contour plots, adjusts the strokeThickness (float): The thickness of histogram and contour plot lines. Defaults to 1. tickLabelsQ (bool): Display tick labels. Defaults to false. ticksQ (bool): Display ticks. Defaults to true. width (int): Image width. Defaults to 228. xAxisLabelQ (bool): Display x axis label. Overrides axisLabelsQ. xAxisQ (bool): Display x axis line. Overrides axesQ. xTickLabelsQ (bool): Display x tick labels. overrides tickLabelsQ. xTicksQ (bool): Display x ticks. Overrides ticksQ. yAxisLabelQ (bool): Display y axis label. Overrides axisLabelsQ. amount of smoothing. Defaults to 0 (no smoothing). Set to 1 for typical smoothing. Higher values (up to 10) increase smoothing. yAxisQ (bool): Display y axis line. Overrides axesQ. yTickLabelsQ (bool): Display y tick labels. Overrides tickLabelsQ. yTicksQ (bool): Display y ticks. Overrides ticksQ. {} save ( self , filepath )","title":"Plots"},{"location":"plots/#plots","text":"CellEngine API: Plots A Plot is an image representing of cytometry data.","title":"Plots"},{"location":"plots/#properties","text":"The Python SDK Plot only has display , get , and save methods. In the case of Plot , properties refers to an optional dictionary of configuration arguments to pass to the get method. Options are detailed above.","title":"Properties"},{"location":"plots/#methods","text":"","title":"Methods"},{"location":"plots/#cellengine.resources.plot.Plot","text":"A class representing a CellEngine plot.","title":"Plot"},{"location":"plots/#cellengine.resources.plot.Plot.display","text":"","title":"display()"},{"location":"plots/#cellengine.resources.plot.Plot.get","text":"Parameters: Name Type Description Default experiment_id str ID of the experiment to which the file belongs. required fcs_file_id str ID of file for which to build a plot. required plot_type str \"contour\", \"dot\", \"density\" or \"histogram\" (case-insensitive) required x_channel str X channel name. required y_channel str (for 2D plots) Y channel name. required z_channel str (for dot plots colored by a 3rd channel) Color channel name. None population_id str Defaults to ungated. None **kwargs Dict axesQ (bool): Display axes lines. Defaults to true. axisLabelsQ (bool): Display axis labels. Defaults to true. compensation (ID): Compensation to use for gating and display. color (str): Case-insensitive string in the format #rgb, #rgba, #rrggbb or #rrggbbaa. The foreground color, i.e. color of curve in \"histogram\" plots and dots in \"dot\" plots. gateLabel (str): One of \"eventcount\", \"mean\", \"median\", \"percent\", \"mad\", \"cv\", \"stddev\", \"geometricmean\", \"name\", \"none\". gateLabelFontSize (float): Font size for gate labels. height (int): Image height. Defaults to 228. percentileStart (float): For contour plots, the percentile of the first contour. percentileStep (float): For contour plots, the percentile step between each contour. postSubsampleN (int): Randomly subsample the file to contain this many events after gating. postSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) after gating. preSubsampleN (int): Randomly subsample the file to contain this many events before gating. preSubsampleP (float): Randomly subsample the file to contain this percent of events (0 to 1) before gating. renderGates (bool): Render gates into the image. seed (int): Seed for random number generator used for subsampling. Use for deterministic (reproducible) subsampling. If omitted, a pseudo-random value is used. smoothing (float): For density and contour plots, adjusts the strokeThickness (float): The thickness of histogram and contour plot lines. Defaults to 1. tickLabelsQ (bool): Display tick labels. Defaults to false. ticksQ (bool): Display ticks. Defaults to true. width (int): Image width. Defaults to 228. xAxisLabelQ (bool): Display x axis label. Overrides axisLabelsQ. xAxisQ (bool): Display x axis line. Overrides axesQ. xTickLabelsQ (bool): Display x tick labels. overrides tickLabelsQ. xTicksQ (bool): Display x ticks. Overrides ticksQ. yAxisLabelQ (bool): Display y axis label. Overrides axisLabelsQ. amount of smoothing. Defaults to 0 (no smoothing). Set to 1 for typical smoothing. Higher values (up to 10) increase smoothing. yAxisQ (bool): Display y axis line. Overrides axesQ. yTickLabelsQ (bool): Display y tick labels. Overrides tickLabelsQ. yTicksQ (bool): Display y ticks. Overrides ticksQ. {}","title":"get()"},{"location":"plots/#cellengine.resources.plot.Plot.save","text":"","title":"save()"},{"location":"populations/","text":"Populations CellEngine API: Populations A Population is a collection of gates. Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.population.Population create ( experiment_id , population ) classmethod delete ( self ) get ( experiment_id , _id = None , name = None ) classmethod update ( self ) Save changes to this Population to CellEngine.","title":"Populations"},{"location":"populations/#populations","text":"CellEngine API: Populations A Population is a collection of gates.","title":"Populations"},{"location":"populations/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"populations/#methods","text":"","title":"Methods"},{"location":"populations/#cellengine.resources.population.Population","text":"","title":"Population"},{"location":"populations/#cellengine.resources.population.Population.create","text":"","title":"create()"},{"location":"populations/#cellengine.resources.population.Population.delete","text":"","title":"delete()"},{"location":"populations/#cellengine.resources.population.Population.get","text":"","title":"get()"},{"location":"populations/#cellengine.resources.population.Population.update","text":"Save changes to this Population to CellEngine.","title":"update()"},{"location":"recipes/","text":"Recipes for common operations from cellengine.utils.api_client.APIClient import APIClient client = cellengine . APIClient ( \"username\" , \"password\" ) e = client . get_experiment ( name = \"my experiment\" ) fcsfile = e . get_fcs_file ( experiment_id = e . _id , name = \"my fcs file\" ) p = e . get_population ( name = \"my population name\" )","title":"Cookbook"},{"location":"recipes/#recipes-for-common-operations","text":"from cellengine.utils.api_client.APIClient import APIClient client = cellengine . APIClient ( \"username\" , \"password\" ) e = client . get_experiment ( name = \"my experiment\" ) fcsfile = e . get_fcs_file ( experiment_id = e . _id , name = \"my fcs file\" ) p = e . get_population ( name = \"my population name\" )","title":"Recipes for common operations"},{"location":"scalesets/","text":"ScaleSets CellEngine API: ScaleSets A scale set is a set of scales (one scale per channel name for all channels in the experiment). Each experiment has exactly one scale set. Uploading a file updates the experiment's scale set to ensure that the new file's channels are included. If a new channel must be added to a ScaleSet, the default scale from the FCS file will be used. It is possible to add or update scales to the scale set. Scales are a dict of dicts, and may be manipulated as expected: scaleset . scales [ \"Channel-1\" ] . update ({ \"maximum\" : 10 }) # or scaleset . scales [ \"Channel-2\" ][ \"maximum\" ] = 10 scaleset . scales [ \"Channel-3\" ][ \"type\" ] = \"ArcSinhScale\" Properties Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted. Methods cellengine.resources.scaleset.ScaleSet apply ( self , file , clamp_q = False , in_place = True ) Apply the scaleset to a file. Parameters: Name Type Description Default file _id or FcsFile The file to which this scaleset will be applied. required clamp_q bool Clamp the output to the scale's minimum and maximum values. False in_place bool If True, updates the FcsFile.events; if False, returns a DataFrame True get ( experiment_id ) classmethod update ( self ) Save changes to this ScaleSet to CellEngine.","title":"ScaleSets"},{"location":"scalesets/#scalesets","text":"CellEngine API: ScaleSets A scale set is a set of scales (one scale per channel name for all channels in the experiment). Each experiment has exactly one scale set. Uploading a file updates the experiment's scale set to ensure that the new file's channels are included. If a new channel must be added to a ScaleSet, the default scale from the FCS file will be used. It is possible to add or update scales to the scale set. Scales are a dict of dicts, and may be manipulated as expected: scaleset . scales [ \"Channel-1\" ] . update ({ \"maximum\" : 10 }) # or scaleset . scales [ \"Channel-2\" ][ \"maximum\" ] = 10 scaleset . scales [ \"Channel-3\" ][ \"type\" ] = \"ArcSinhScale\"","title":"ScaleSets"},{"location":"scalesets/#properties","text":"Properties are getter methods and setter methods representing the underlying CellEngine object. Properties are the snake_case equivalent of those documented on the CellEngine API unless otherwise noted.","title":"Properties"},{"location":"scalesets/#methods","text":"","title":"Methods"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet","text":"","title":"ScaleSet"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.apply","text":"Apply the scaleset to a file. Parameters: Name Type Description Default file _id or FcsFile The file to which this scaleset will be applied. required clamp_q bool Clamp the output to the scale's minimum and maximum values. False in_place bool If True, updates the FcsFile.events; if False, returns a DataFrame True","title":"apply()"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.get","text":"","title":"get()"},{"location":"scalesets/#cellengine.resources.scaleset.ScaleSet.update","text":"Save changes to this ScaleSet to CellEngine.","title":"update()"}]}